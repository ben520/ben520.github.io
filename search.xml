<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux磁盘空间管理</title>
      <link href="/2023/07/09/linux%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/"/>
      <url>/2023/07/09/linux%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="MBR-x2F-msdos分区模式"><a href="#MBR-x2F-msdos分区模式" class="headerlink" title="MBR&#x2F;msdos分区模式"></a>MBR&#x2F;msdos分区模式</h3><p>1<del>4个主分区，或者0</del>3个主分区+1个扩展分区（N个逻辑分区）</p><p>最大支持容量2.2TB的磁盘</p><p>扩展分区不能格式化</p><h3 id="使用fdisk分区工具"><a href="#使用fdisk分区工具" class="headerlink" title="使用fdisk分区工具"></a>使用fdisk分区工具</h3><p>查看分区表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l /dev/sda</span><br></pre></td></tr></table></figure><p>修改硬盘的分区表</p><p>fdisk硬盘设备</p><p>常用交互指令：</p><p>m列出指令帮助</p><p>p查看现有的分区表</p><p>n新建分区</p><p>d删除分区</p><p>q放弃更改并退出</p><p>w保存更改并退出</p><h3 id="识别新分区"><a href="#识别新分区" class="headerlink" title="识别新分区"></a>识别新分区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partprobe/dev/sdb或者reboot</span><br></pre></td></tr></table></figure><p>使用partprobe命令</p><p>当硬盘的分区表被更改以后，需要将分区表的变化及时</p><p>通知Linux内核，最后reboot一次，否则在访问分区时可能会找不到准备的设备</p><h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><p>常用的格式化工具</p><p>mkfs工具集</p><p>mkfs.ext3分区设备的路径（mkfs.ext3&#x2F;dev&#x2F;sdb1）</p><p>mkfs.ext4分区设备的路径（mkfs.ext4&#x2F;dev&#x2F;sdb1）</p><p>mkfs.xfs分区设备的路径（mkfs.xfs&#x2F;dev&#x2F;sdb1）</p><p>mkfs.vfat分区设备的路径（mkfs.vfat&#x2F;dev&#x2F;sdb1）</p><h3 id="访问已格式化的分区"><a href="#访问已格式化的分区" class="headerlink" title="访问已格式化的分区"></a>访问已格式化的分区</h3><p>使用mount命令挂载并测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 挂载</span><br><span class="line">mkdir /mnt/test</span><br><span class="line">mount /dev/sdb1/mnt/test</span><br><span class="line"># 测试</span><br><span class="line">cp /etc/fstab/mnt/test/fstab.bak</span><br><span class="line">ls /mnt/test</span><br><span class="line"># 使用df查看使用情况</span><br><span class="line">df -hT /mnt/test</span><br></pre></td></tr></table></figure><p>开机自动挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#配置文件/etc/fstab的记录格式</span><br><span class="line">#设备路径挂载点类型参数备份标记检测顺序</span><br><span class="line">mkdir/mnt/part#创建挂载点</span><br><span class="line">vim/etc/fatab</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># /etc/fstab</span><br><span class="line"># Created by anaconda on Sat Jul  8 10:13:05 2023</span><br><span class="line">#</span><br><span class="line"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk/&#x27;.</span><br><span class="line"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info.</span><br><span class="line">#</span><br><span class="line"># After editing this file, run &#x27;systemctl daemon-reload&#x27; to update systemd</span><br><span class="line"># units generated from this file.</span><br><span class="line">#</span><br><span class="line">/dev/mapper/rhel-root   /                       xfs     defaults        0 0</span><br><span class="line">UUID=a01b6246-40f8-4770-a696-2ce0ed787785 /boot                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/rhel-swap   swap                    swap    defaults        0 0</span><br><span class="line">/dev/sdb1   /test                    xfs    defaults        0 0</span><br><span class="line"></span><br><span class="line">  mount -a</span><br><span class="line">  df -hT /mnt/part</span><br></pre></td></tr></table></figure><h3 id="GPT分区模式"><a href="#GPT分区模式" class="headerlink" title="GPT分区模式"></a>GPT分区模式</h3><p>GPT，GUID Partition Table，全局唯一标识分区表</p><p>1、突破固定大小64字节的分区表限制</p><p>2、最多可支持128个主分区，最大支持18EB磁盘（1EB&#x3D;1024PB&#x3D;1024*1024TB）</p><h3 id="parted常用分区指令"><a href="#parted常用分区指令" class="headerlink" title="parted常用分区指令"></a>parted常用分区指令</h3><p>-mktablemsdos|gtp#建立指令模式分区表</p><p>-mkpartprimary文件系统类型startend #指定大小或百分比作为起始位置</p><p>-print#查看分区表</p><p>-rm序号#删除指定的分区</p><p>-quit#退出交互环境</p><h3 id="Swap交换空间"><a href="#Swap交换空间" class="headerlink" title="Swap交换空间"></a>Swap交换空间</h3><p>创建Swap分区</p><p>1、新建一个大小为2GB的分区，比如&#x2F;dev&#x2F;sdb2</p><p>2、确保无误保存退出、</p><p>3、识别新的分区表</p><p>4、格式化交换分区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mkswap命令</span><br><span class="line"># 格式：mkswap分区设备</span><br><span class="line">mkswap/dev/sdb2</span><br><span class="line">#扩展交换空间</span><br><span class="line">swapon/dev/sdb2#启用交换分区</span><br><span class="line">swapon-s#查看交换分区</span><br><span class="line">swapoff/dev/sdb2#停止交换分区</span><br></pre></td></tr></table></figure><h3 id="文件扩展Swap空间"><a href="#文件扩展Swap空间" class="headerlink" title="文件扩展Swap空间"></a>文件扩展Swap空间</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建Swap文件，利用文件创建Swap空间</span><br><span class="line"># ddif=源设备of=目标设备bs=块大小count=块数</span><br><span class="line">dd if=/dev/zeroof=/opt/swap.dbbs=1Mcount=2048</span><br><span class="line">#格式化交换文件</span><br><span class="line">#格式：mkswap -f 交换文件</span><br><span class="line">#选项 -f 表示强制执行（force）</span><br><span class="line">mkswap -f /opt/swap.db</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux磁盘管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/12/hello-world/"/>
      <url>/2023/06/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础4.2-综合实例</title>
      <link href="/2022/10/25/PHP%E5%9F%BA%E7%A1%804-2-%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/10/25/PHP%E5%9F%BA%E7%A1%804-2-%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="多项选择题"><a href="#多项选择题" class="headerlink" title="多项选择题"></a>多项选择题</h5><p>1、设计一个网页，询问用户“下列哪些属于恋爱鼻祖？”并列出若干人名(王宝钏，王银钏，周芷若…….)以供选择。用户单击“提交”按钮时，提示答案是否正确。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html&quot;</span>;charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;综合实例-多项选择题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;下列哪些属于恋爱鼻祖?&lt;/p&gt;</span><br><span class="line">&lt;form name=<span class="string">&quot;form1&quot;</span> id=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;A&quot;</span>/&gt;王宝钏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;B&quot;</span>/&gt;王银钏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;C&quot;</span>/&gt;白素贞&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;D&quot;</span>/&gt;周芷若&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;E&quot;</span>/&gt;赵敏&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;F&quot;</span>/&gt;七仙女&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;G&quot;</span>/&gt;殷素素&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;H&quot;</span>/&gt;黄蓉&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;answer[]&quot;</span> value=<span class="string">&quot;I&quot;</span>/&gt;岳灵珊&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line"><span class="comment">//得到一个数组$answer，仅包含用户选中的项</span></span><br><span class="line"><span class="variable">$answer</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;answer&#x27;</span>];</span><br><span class="line"><span class="variable">$ehoice</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$answer</span>); <span class="variable">$i</span>++)</span><br><span class="line"><span class="variable">$ehoice</span> .= <span class="variable">$answer</span>[<span class="variable">$i</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ehoice</span> == <span class="string">&#x27;ACFG&#x27;</span>)</span><br><span class="line"><span class="title function_ invoke__">show</span>(<span class="string">&#x27;恭喜你，答对了！&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="title function_ invoke__">show</span>(<span class="string">&#x27;不对，重新答！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义函数用于弹出框提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$message</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">$message</span>&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><em>网页中，表单里的复选框中的name全部都为“answer[]”这样在php代码中$_POST[‘answer’]取到的是一个数组，数组中的所有元素仅由用户选中的那些复选框组成，而元素的值则是该复选框的value的值。通过把所有被用户选中的复选框的value的值连接起来，形成一个字符串，从而用于与if语句里的答案比较，可方便的判断答案是否正确</em></p><h5 id="计算器程序"><a href="#计算器程序" class="headerlink" title="计算器程序"></a>计算器程序</h5><p>设计一个网页，让用户输入一个四则运算式，采用下拉列表提供加、减、乘、除四种运算符选择。当用户点击“求值”按钮时，自动计算结果并显示出提示信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html&quot;</span>; charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;计算器程序&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$opr</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;opr&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">calc</span>(<span class="variable">$a</span>,<span class="variable">$opr</span>,<span class="variable">$b</span>,<span class="variable">$c</span>);<span class="comment">//计算</span></span><br><span class="line"><span class="title function_ invoke__">show</span>(<span class="string">&quot;<span class="subst">$a</span> <span class="subst">$opr</span> <span class="subst">$b</span>=<span class="subst">$c</span>&quot;</span>);<span class="comment">//显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于计算一个四则运算式，结果存储于$c</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$opr</span>,<span class="variable">$b</span>,&amp;<span class="variable">$c</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$opr</span>)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>+<span class="variable">$b</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>-<span class="variable">$b</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>*<span class="variable">$b</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="variable">$c</span> = @(<span class="variable">$a</span>/<span class="variable">$b</span>);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义函数，用于弹出框显示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$message</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">$message</span>&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;四则运算计算器&lt;/p&gt;</span><br><span class="line">&lt;form name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;a&quot;</span> type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;a&quot;</span> size=<span class="string">&quot;6&quot;</span>/&gt;</span><br><span class="line">&lt;select name=<span class="string">&quot;opr&quot;</span> id=<span class="string">&quot;opr&quot;</span>&gt;</span><br><span class="line">&lt;option&gt;+&lt;/option&gt;</span><br><span class="line">&lt;option&gt;-&lt;/option&gt;</span><br><span class="line">&lt;option&gt;*&lt;/option&gt;</span><br><span class="line">&lt;option&gt;/&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;b&quot;</span> id=<span class="string">&quot;b&quot;</span> type=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;6&quot;</span>/&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;submit&quot;</span> type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;求值&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>首先用户输入的两个运算数$a,$b以及一个运算符$opr，调用自定义函数calc计算结果$c，然后调用show自定义函数显示结果。函数采用switch-case结构进行判断，效果比if好。calc中有一个地方采用@命令，防止除法发生错误时再浏览器上显示错误信息，造成界面被破坏。</p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP,实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础4.1-PHP函数</title>
      <link href="/2022/10/24/PHP%E5%9F%BA%E7%A1%804-1-PHP%E5%87%BD%E6%95%B0/"/>
      <url>/2022/10/24/PHP%E5%9F%BA%E7%A1%804-1-PHP%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h4><p>函数的作用就是让同一段代码可以被多个地方直接调用，从而大大节省编程时间、减少编程错误、减少代码冗余、容易维护代码、实现结构化编程。函数分为系统函数和自定义函数。</p><h5 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h5><p>所谓函数的定义，就是指采用若干行代码以指明此函数具体的执行过程以及执行之前需要输入什么参数，执行后可以返回什么值。函数定义的语法格式：</p><p>function 函数名([形参表]){<br>        函数体<br>    }</p><p>其中，形参必须是变量名、数组名；函数名可以是以字母或下划线开头、后面跟任意数量的字母、数字、下划线，但不能与系统函数或用户已经定义的函数名重名。与C语言不同的是，函数定义可以随意放在函数调用语句之前或之后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">4</span>);<span class="comment">//放在定义函数之前 输出：8</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$a</span>*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="number">5</span>);<span class="comment">//放在定义函数之后 输出10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h5><p>在函数定义内部，可以使用return语句来结束函数的运行，并把一个值返回给主调语句。语法格式：</p><p>return[(表达式)]; </p><p>功能：将表达式的值(作为函数值)带回主调函数中。</p><h5 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h5><p>(1)函数名（实参表）<br>(2)变量名&#x3D;函数名（实参表）<br>(3)echo函数名（实参表）</p><p><strong>注：(1)形式(1)用于调用无返回值的函数，形式(2)(3)用于调用有返回值的函数。<br>(2)实参的个数、类型必须与形参相同。<br>(3)实参可以是常量、变量、表达式。</strong></p><p>例如：<br>    已知：<br>y&#x3D;1(x&gt;0);<br>y&#x3D;0(x&#x3D;0);<br>y&#x3D;-1(x&lt;0)<br>要求：先定义一个函数fun(),用于返回y的值；再写一个函数调用语句，输出y的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>&gt;<span class="number">0</span>) <span class="variable">$y</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$x</span>==<span class="number">0</span>) <span class="variable">$y</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="variable">$y</span>= -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>(<span class="variable">$y</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fun</span>(-<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h5><p>函数参数一般都是通过值来传递的，这就意味着函数内部即使修改了形参的值，也不会对主调语句中的实参有影响。但是，当函数形参采用引用参数时，则任何对于形参的值的修改都相当于对实参的值的修改。引用参数的语法格式是在形参前面加&amp;字符。</p><p><strong>值传递和引用传递的比较</strong></p><table><thead><tr><th>方式</th><th>形参</th><th>实参</th><th>解释</th></tr></thead><tbody><tr><td>值传递</td><td>变量名</td><td>常量、变量、表达式</td><td>函数调用时，将实参的值传递给形参</td></tr><tr><td>值传递</td><td>数组名</td><td>数组名</td><td>函数调用时，将实参的值传递给形参</td></tr><tr><td>引用传递</td><td>&amp;变量名</td><td>变量名</td><td>形参与实参共同占用一个存储单元</td></tr><tr><td>引用传递</td><td>&amp;数组名</td><td>数组名</td><td>形参与实参共同占用一个存储单元</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//形参为变量名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">&amp;<span class="variable">$x</span>,<span class="variable">$y</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$x</span> += <span class="number">10</span>;</span><br><span class="line"><span class="variable">$y</span> += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">fun</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;<span class="subst">$a</span>,<span class="subst">$b</span>&quot;</span>);<span class="comment">//输出：11，5</span></span><br><span class="line"><span class="comment">//形参为数组名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_sort</span>(<span class="params"><span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$b</span>);<span class="variable">$i</span>++)</span><br><span class="line"><span class="variable">$b</span>[<span class="variable">$i</span>] += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>);</span><br><span class="line"><span class="title function_ invoke__">my_sort</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$a</span>);<span class="variable">$i</span>++)</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$a</span>[<span class="variable">$i</span>].<span class="string">&quot;,&quot;</span>);<span class="comment">//输出：2，4，6，8</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础4-程序流程控制</title>
      <link href="/2022/10/24/PHP%E5%9F%BA%E7%A1%804/"/>
      <url>/2022/10/24/PHP%E5%9F%BA%E7%A1%804/</url>
      
        <content type="html"><![CDATA[<h4 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h4><p>PHP的流程控制语句大多与C语言一致，仅有个别不同。</p><h5 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h5><p>条件控制的典型语句有if语句和switch语句。</p><p>（1）if语句</p><p>语法：if(表达式)语句1[else语句2]</p><p>当表达式为真时，就执行“语句1”，否则执行“语句2”。其中“语句1”“语句2”可以是任意一个PHP语句。例如：</p><p>if($a&gt;$b) $max &#x3D; $a; else $max &#x3D; $b;上面的[ ]表示若不需要可以省略。</p><p>（2）if语句的嵌套</p><p>if语句一般用于解决单分支、双分支问题，必要时，也可以解决多分支问题。</p><p>if语句的嵌套格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(表达式1)语句1</span><br><span class="line">elseif(表达式2)语句2</span><br><span class="line">elseif(表达式3)语句3</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">else 语句n</span><br></pre></td></tr></table></figure><p>在PHP中elseif可以隔开写成else if</p><p>例：从输入框中输入一个数，单击“提交”按钮后输出成绩等级，90分以上记作优，80~89记作良………</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;form id=&quot;form1&quot; name=&quot;form1&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;score&quot; id=&quot;score&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;button&quot; id=&quot;button&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">if(isset($_REQUEST[&quot;button&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">$score = $_REQUEST[&quot;score&quot;];</span><br><span class="line">if($score&gt;=90) $grade = &#x27;优&#x27;;</span><br><span class="line">elseif($score&gt;=80) $grade = &#x27;良&#x27;;</span><br><span class="line">else if($score&gt;=70) $grade = &#x27;差&#x27;;</span><br><span class="line">else if($score&gt;=60) $grade = &#x27;很差&#x27;;</span><br><span class="line">else $grade = &#x27;非常差&#x27;;</span><br><span class="line">echo &quot;你的成绩等级为：&quot; .$grade;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）switch语句</p><p>switch语句也称为多分支语句，它可以根据表达式的值来决定执行哪个case块的语句</p><p>switch语句的语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)</span><br><span class="line">&#123; case 常量1:语句块1;</span><br><span class="line">[break];</span><br><span class="line">  case 常量2:语句块2;</span><br><span class="line">[break];</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  case 常量n:语句块n;</span><br><span class="line">[break];</span><br><span class="line">  [default:语句块n+1;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先计算表达式的值，如果表达式值与某个case块的常量相等，就转去执行该case块的语句，当表达式值与任何case块的常量都不相等时，就执行default中的语句。</p><p><strong>注：（1）表达式的类型可以是数值型或字符串型（2）多个不同的case可以执行同一个语句块</strong></p><p>例如：从文本框中输入一个月份，单击“提交”按钮后输出该月份的天数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;form id=<span class="string">&quot;form1&quot;</span> name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">请输入你要查询的月份：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;month&quot;</span> id=<span class="string">&quot;month&quot;</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;button&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$month</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;month&quot;</span>];</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$month</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>: <span class="variable">$day</span> = <span class="number">31</span> .<span class="string">&quot;天&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: <span class="variable">$day</span> = <span class="number">30</span> .<span class="string">&quot;天&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="variable">$day</span> = <span class="number">28</span> .<span class="string">&quot;天&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="variable">$day</span> = <span class="string">&quot;你所输入的月份不合法，请重新输入&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (<span class="string">&quot;<span class="subst">$month</span> 月份的天数为：.<span class="subst">$day</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h5><p>循环控制语句简称循环语句，PHP中有4中循环语句，分别是while语句、do-while语句、for语句、foreach语句</p><p>（1）while循环语句</p><p>语法格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(表达式)语句，例：用<span class="keyword">while</span>循环语句求<span class="number">1</span>~<span class="number">100</span>的偶数和。</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$i</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$s</span>+<span class="variable">$i</span>;</span><br><span class="line"><span class="variable">$i</span> = <span class="variable">$i</span>+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;和为：<span class="subst">$s</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）do-while循环语句</p><p>语法格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体语句</span><br><span class="line"><span class="keyword">while</span>(表达式);</span><br><span class="line">用<span class="keyword">do</span>-<span class="keyword">while</span>语句求<span class="number">1</span>~<span class="number">100</span>的偶数和。</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$s</span>+<span class="variable">$i</span>;</span><br><span class="line"><span class="variable">$i</span> = <span class="variable">$i</span>+<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">100</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;和为：<span class="subst">$s</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注：while语句的特点是：先判断后执行，可能一次也不执行循环体语句。而do-while语句是先执行后判断，至少要执行一次循环体语句</strong></p><p>（3）for循环语句</p><p>语法格式：for(表达式1;表达式2;表达式3)循环体语句</p><p><img src="https://imglf4.lf127.net/img/7bfbbdd899d79bda/S1N2ZTNIeU5LNUdKaGQwakNDVUJLVHdVQ29nRWh6U2xucjAyTkJGUkR1TT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="for语句"></p><p>说明:(1)表达式1常用于对循环变量赋初始值；表达式2常用于判断循环变量是否越过终值；表达式3常用于修改循环变量的值。（2）表达式1，表达式2，表达式3都可以省略，但分号不能省略。例如：for(;;)语句。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用<span class="keyword">for</span>语句求<span class="number">1</span>~<span class="number">100</span>的偶数和</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">2</span>;<span class="variable">$i</span>&lt;=<span class="number">100</span>;<span class="variable">$i</span>+=<span class="number">2</span>)</span><br><span class="line"><span class="variable">$s</span> = <span class="variable">$s</span>+<span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;和为：<span class="subst">$s</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（4）foreach循环语句</p><p>foreach语句用于列举一个数组中的所有元素。</p><p>语法格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(数组名 <span class="keyword">as</span> 成员名)</span><br><span class="line">语句</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$x</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;<span class="subst">$x</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>功能：对于数组中的每个元素，都是重复执行的循环体。成员名代表数组中的一个元素。</p><h5 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h5><ul><li>break语句：中止并跳出循环。</li><li>continue语句：中止当前的循环，重新开始一个新的循环。</li></ul><p>break语句只能用于switch语句中或循环体内，当break语句用于循环体内时，常与if语句配合使用。continue语句只能用于循环体内，并常与if语句配合使用。</p><h5 id="文件包含语句"><a href="#文件包含语句" class="headerlink" title="文件包含语句"></a>文件包含语句</h5><p>在一个PHP文件中，可以直接用“文件包含语句”把另一个文件的所有内容包含进当前位置。文件包含语句共有4种，其关键字及语法格式：</p><p>include(‘文件名’);<br>include_once(‘文件名’);<br>require(‘文件名’);<br>require_once(‘文件名’)；</p><p>一方面，include及require表示直接把文件包含进来；include_once和require_once表示只把文件包含进来一次，不重复包含。另一方面，include及include_once当找不到被包含的文件时，浏览器会发出警告信息但仍继续执行代码；require及require_once当找不到被包含的文件时，浏览器会发出致命错误信息并中止执行代码。上述“文件名”均可采用相对路径或绝对路径两种方式，但要注意的是，路径分隔符要采用斜杠（&#x2F;）来表示。若省略路径，则表示仅在当前目录中查找文件。</p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础3-运算符与表达式</title>
      <link href="/2022/10/24/PHP%E5%9F%BA%E7%A1%803/"/>
      <url>/2022/10/24/PHP%E5%9F%BA%E7%A1%803/</url>
      
        <content type="html"><![CDATA[<p>PHP的运算符与C语言基本相同，也引进15级运算符，常用的运算符</p><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th>描述</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">()</td><td>圆括号</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">++,- -,-,!</td><td>自增、自减、负号、逻辑非</td><td align="center">非结合</td></tr><tr><td align="center">3</td><td align="center">*,&#x2F;,%</td><td>乘、除、取余</td><td align="center">从左向右</td></tr><tr><td align="center">4</td><td align="center">+,-</td><td>加、减</td><td align="center">从左向右</td></tr><tr><td align="center">5</td><td align="center">&lt;&lt;,&gt;&gt;</td><td>左移、右移</td><td align="center">从左向右</td></tr><tr><td align="center">6</td><td align="center">&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</td><td>大于、大于等于、小于、小于等于</td><td align="center">非结合</td></tr><tr><td align="center">7</td><td align="center">&#x3D;&#x3D;,!&#x3D;</td><td>等于、不等于</td><td align="center">非结合</td></tr><tr><td align="center">8</td><td align="center">&amp;</td><td>按位与</td><td align="center">从左向右</td></tr><tr><td align="center">9</td><td align="center">^</td><td>按位异或</td><td align="center">从左向右</td></tr><tr><td align="center">10</td><td align="center">|</td><td>按位或</td><td align="center">从左向右</td></tr><tr><td align="center">11</td><td align="center">&amp;&amp;</td><td>逻辑与</td><td align="center">从左向右</td></tr><tr><td align="center">12</td><td align="center">||</td><td>逻辑或</td><td align="center">从左向右</td></tr><tr><td align="center">13</td><td align="center">?:</td><td>条件运算符</td><td align="center">从左向右</td></tr><tr><td align="center">14</td><td align="center">&#x3D;,+&#x3D;,-&#x3D;,*&#x3D;,&#x2F;&#x3D;,%&#x3D;</td><td>赋值运算符</td><td align="center">从左向右</td></tr><tr><td align="center">15</td><td align="center">@</td><td>错误控制运算符</td><td align="center">非结合</td></tr></tbody></table><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><p>（1）双目运算符：+，-，*，&#x2F;，%</p><p>当“&#x2F;”两侧为整数时，结果为整数或浮点数；当“%”两侧为浮点数时，舍去小数点部分取整，结果为整数。</p><p>（2）单目运算符：++（自增）- -（自减）</p><ol><li><p>++，- -只能作用在变量上，不能作用在常量和表达式上。</p></li><li><p>$i++,++$i单独成为语句时，均等价于$i&#x3D;$i+1</p></li><li><p>$i++,++$i的不同之处：$i++是先返回$i,再使$i的值加1；++$i则是先使$i的值加1，再返回$i。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$j</span> = <span class="variable">$i</span>++;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$i</span>,<span class="subst">$j</span>&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：4，3</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable">$j</span> = ++<span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$i</span>,<span class="subst">$j</span>&quot;</span>;<span class="comment">//输出：4，4</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>算术运算符的优先级</p><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">++，- -</td><td align="center">2级</td><td align="center">非结合</td></tr><tr><td align="center">*，&#x2F;，%</td><td align="center">3级</td><td align="center">从左向右</td></tr><tr><td align="center">+，-</td><td align="center">4级</td><td align="center">从左向右</td></tr></tbody></table><p>由算术运算符组成的表达式称为算术表达式，算术表达式的值是一个整数或浮点数。</p><h5 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h5><p>关系运算符的优先级</p><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</td><td align="center">6级</td><td align="center">非结合</td></tr><tr><td align="center">&#x3D;&#x3D;,!&#x3D;</td><td align="center">7级</td><td align="center">非结合</td></tr></tbody></table><p>关系运算符表示对操作数的比较运算，因此也称为比较运算符，由关系运算符组成的表达式称为关系表达式。关系表达式的值为true或false，例如7&gt;&#x3D;7的值为true。</p><p>注：如果数值和字符串进行比较，则字符串先被转换为数值再进行比较；如果两个数字字符串进行比较，则它们都会被当成数值来比较。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">12.5</span>&gt;<span class="string">&quot;abc&quot;</span>); <span class="comment">//实际比较的是12.5和0，输出true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;12.5&quot;</span>&gt;<span class="string">&quot;9&quot;</span>); <span class="comment">//实际比较的是12.5和9，输出true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;abc&quot;</span>&gt;=<span class="string">&quot;zc&quot;</span>); <span class="comment">//实际比较的是“abc”和“zc” 输出false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p>逻辑运算符的优先级</p><table><thead><tr><th align="center">运算符</th><th align="center">优先级</th><th align="center">栗子</th><th align="left">解释</th></tr></thead><tbody><tr><td align="center">!</td><td align="center">2级</td><td align="center">!&amp;x</td><td align="left"></td></tr><tr><td align="center">&amp;&amp;</td><td align="center">11级</td><td align="center">$x&amp;&amp;$y</td><td align="left">只要$x,$y有一个为假，结果就为假</td></tr><tr><td align="center">||</td><td align="center">12级</td><td align="center">$x||$y</td><td align="left">只要$x,$y有一个为真，结果就为真</td></tr></tbody></table><p>参加逻辑运算的操作数必须为逻辑值。由逻辑运算符组成的表达式称为逻辑表达式。逻辑表达式值为true或false，例如：2+3&gt;7&amp;&amp;7&lt;8是一个逻辑表达式，它的值为false。若一个表达式含有各类运算符，则表达式的类型取决于级别最低的运算符的类型。</p><h5 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h5><p>PHP中唯一的一个三目运算符就是条件运算符（?:），由条件运算符组成的表达式称为条件表达式，格式为：</p><p><u>操作数1?操作数2:操作数3</u></p><p>其中“操作数1”的值必须为逻辑值，否则将出现编译错误，进行条件运算时，首先判断“操作数1”是否为真（true）</p><p>如果“操作数1”为真，则条件表达式的值为“操作数2”的值；如果“操作数1”的值为假，则条件表达式的值为“操作数3”的值</p><p>例如：$a&#x3D;3,$b&#x3D;5,则$a&gt;$b?$a:$b的值为5。</p><p><strong>注：条件表达式具有“右结合性”的意思是，操作从右向左组合，例如：$a?$b:$c?$d:$e表达式的计算与$a?$b:($c?$d:$e)相同。</strong></p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p>（1）赋值运算符</p><p>赋值运算符包括&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;，它们的优先级为14级，结合性是从左向右，例如：$a&#x3D;$b&#x3D;$c&#x3D;4;语句表示$a,$b,$c的值均为4。</p><p>复合赋值运算符</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">举 例</th><th align="center">含 义</th></tr></thead><tbody><tr><td align="center">+&#x3D;</td><td align="center">$a+&#x3D;$b</td><td align="center">$a&#x3D;$a+$b</td></tr><tr><td align="center">-&#x3D;</td><td align="center">$a-&#x3D;$b</td><td align="center">$a&#x3D;$a-$b</td></tr><tr><td align="center">*&#x3D;</td><td align="center">$a*&#x3D;$b</td><td align="center">$a&#x3D;$a*$b</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">$a&#x2F;&#x3D;$b</td><td align="center">$a&#x3D;$a&#x2F;$b</td></tr><tr><td align="center">%&#x3D;</td><td align="center">$a%&#x3D;$b</td><td align="center">$a&#x3D;$a%$b</td></tr></tbody></table><p>（2）赋值表达式</p><p>赋值表达式的值等于被赋值的变量的值。例如：表达式$a&#x3D;5的值为5。</p><h5 id="错误控制运算符"><a href="#错误控制运算符" class="headerlink" title="错误控制运算符"></a>错误控制运算符</h5><p>PHP支持错误控制运算符@，将其放置在PHP表达式之前，该表达式可能产生的任何错误信息都将被忽略。</p><p><strong>注：当要使用的变量名的值为NULL时，就必须在变量名前面加@。</strong></p><p><em>小结：PHP常用运算符可分为6类：算术运算符、关系运算符、逻辑运算符、条件运算符、赋值运算符、错误控制运算符</em></p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础2-变量</title>
      <link href="/2022/10/23/PHP%E5%9F%BA%E7%A1%802/"/>
      <url>/2022/10/23/PHP%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h3><p>变量是程序运行过程中，各种数据所存储的载体。程序根据变量的名称而找到对应的数据</p><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><p>以$开头，再加上一个合法的字符串，就成为自定义变量名，所谓合法，是指以字母或下划线开头，后面跟任意字母、数字、下划线。</p><h5 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h5><p>由于PHP变量在使用之前并不需要像C语言那样事先定义变量类型，因此，变量一般是通过初始化来定义的，初始化时给变量赋一个值，PHP变量的类型由所赋值的类型决定。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">100</span>;<span class="comment">//$a为整型变量</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">3.14</span>;<span class="comment">//$b为浮点型变量</span></span><br><span class="line"><span class="variable">$c</span> = <span class="string">&quot;school&quot;</span>;    <span class="comment">//$c为字符串变量</span></span><br><span class="line"><span class="variable">$d</span> = <span class="literal">true</span>;<span class="comment">//$d为布尔值变量</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="变量赋值的方式"><a href="#变量赋值的方式" class="headerlink" title="变量赋值的方式"></a>变量赋值的方式</h5><p>（1）值赋值：将一个变量的值赋给另一个变量，例如：$a &#x3D; $b。</p><p>（2）引用赋值：将一个变量的地址赋给另一个变量，例如：$a &#x3D; &amp; $b，将$b的地址赋给$a，让$a、$b共同占用一个存储单元。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$var</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable">$bar</span> = &amp; <span class="variable">$var</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$bar</span>;<span class="comment">//输出：hello</span></span><br><span class="line"><span class="variable">$bar</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var</span>;<span class="comment">//输出：world</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h5><p>按作用域划分，变量可分为局部变量和全局变量。</p><p>（1）局部变量</p><p>​在主程序中或函数内部定义的变量称为局部变量。在主程序中定义的局部变量，其作用域局限于主程序，不能在函数内部使用；在函数内部定义的局部变量，其作用域局限于函数内部，不能在主程序中使用，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$my_var</span> = <span class="string">&quot;test&quot;</span>;<span class="comment">//$my_var的作用域局限于主程序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_func</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$local_var</span> = <span class="number">123</span>;<span class="comment">//$local_var的作用域局限于当前函数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$local_var= &#x27;</span>.<span class="variable">$local_var</span>. <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：$local_var=123</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$my_var= &#x27;</span>.<span class="variable">$my_var</span>. <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//显示变量未定义</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">my_func</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$local_var= &#x27;</span>.<span class="variable">$local_var</span>. <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//显示变量未定义</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$my_var= &#x27;</span>.<span class="variable">$my_var</span>. <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：$my_var=test</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在函数内部定义的局部变量，又可分为自动变量和静态变量。在函数内部使用static声明的变量称为静态变量；否则，称为自动变量。自动变量于静态变量的区别在于：对于自动变量，每调用一次函数，都会为自动变量分配存储单元，函数调用结束，自动变量所占的存储单元全部释放。对于静态变量，第一次调用函数时，为静态变量分配存储单元，函数调用结束，静态变量所占的存储单元不会被释放。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vars</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;<span class="comment">//$a为动态变量</span></span><br><span class="line"><span class="built_in">static</span> <span class="variable">$b</span> = <span class="number">0</span>;<span class="comment">//$b为静态变量</span></span><br><span class="line"><span class="variable">$a</span>++;</span><br><span class="line"><span class="variable">$b</span>++;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span>,<span class="subst">$b</span>&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>;<span class="variable">$i</span>&lt;=<span class="number">3</span>;<span class="variable">$i</span>++)</span><br><span class="line"><span class="title function_ invoke__">vars</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">1，1</span></span><br><span class="line"><span class="comment">1，2</span></span><br><span class="line"><span class="comment">1，3</span></span><br><span class="line"><span class="comment">第1次调用vars函数时，$a,$b的初始值为0，第1次调用结束时，$a=1,$b=1,返回主程序时，$a被释放，但$b不释放，仍保留原始值。第2次调用vars函数时，$a的初始值为0，$b的初始值为1，第2次调用结束时，$a=1,$b=2。第3次调用vars函数时，$a的初始值为0，$b的初始值为2，第3次调用结束时，$a=1,$b=3。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（2）全局变量</p><p>在主程序中定义的局部变量，如果想在函数内部使用，可以在函数内部使用global关键字声明为全局变量，否则视为另外定义一个新的局部变量。声明全局变量的语句为global变量名；</p><p>声明全局变量，并没有为变量分配存储单元。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;<span class="comment">//此变量的作用域目前仅限于当前主程序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$a</span> = <span class="number">456</span>;<span class="comment">//这个变量有别于前面那个$a，它们是两个不同的变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：456</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$a</span>;<span class="comment">//将主程序定义的$a声明为全局变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：123</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">789</span>;<span class="comment">//为主程序的$a赋值为789</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;<span class="comment">//输出：789</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h4><p>PHP预设了若干个数组，其中存储了运行环境，用户输入数据等，称为预定义变量，其作用域是全局自动有效。预定义变量主要有以下几种。</p><h5 id="服务器变量-SERVER"><a href="#服务器变量-SERVER" class="headerlink" title="服务器变量$_SERVER"></a>服务器变量$_SERVER</h5><p>服务器变量是由Web服务器创建的数组，其内容包括文件的头部信息、路径、脚本位置等信息，常用的几个服务器变量</p><table><thead><tr><th>服务器变量名</th><th>变量的存储内容</th></tr></thead><tbody><tr><td>$_SERVER[‘HTTP_USER_AGENT’]</td><td>用户使用的浏览器信息</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>host头信息，如localhost</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>服务器主机的名称，如localhost</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>服务器的IP地址，如127.0.0.1</td></tr><tr><td>$_SERVER[‘SERVER_PORT’]</td><td>服务器的端口号，如80</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>当前浏览用户的IP地址</td></tr><tr><td>$_SERVER[‘DOCUMENT_ROOT’]</td><td>文档根目录</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>当前执行脚本的绝对路径名</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>用户连接到服务器时使用的端口号</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>URL中的请求字符串</td></tr><tr><td>$_SERVER[‘REQUEST_URI’]</td><td>访问此页面所需的URI</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>包含当前脚本的路径</td></tr><tr><td>$_SERVER[‘PHP_SELF’]</td><td>当前正在执行脚本的文件名</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>请求开始时的时间戳</td></tr><tr><td>$_SERVER[‘REQUEST_TIME_FLOAT’]</td><td>同上，精确到微秒(PHP 5.4.0)</td></tr></tbody></table><h5 id="环境变量-ENV"><a href="#环境变量-ENV" class="headerlink" title="环境变量$_ENV"></a>环境变量$_ENV</h5><p>环境变量记录着PHP运行环境相关的信息，如系统名，系统路径等，可以通过$_ENV[‘成员变量名’]的方式来访问环境变量，常用的成员变量名OS、Path等。</p><p>如果PHP是测试版本，使用环境变量是可能会出现找不到环境变量的问题，打开php.ini配置文件，找到variables_order&#x3D;”GPCS”，将该行改成variables_order&#x3D;”EGPCS”，然后保存并重启Apache服务器。</p><h5 id="全局变量-GLOBALS"><a href="#全局变量-GLOBALS" class="headerlink" title="全局变量$GLOBALS"></a>全局变量$GLOBALS</h5><p>$GLOBALS变量以数组形式记录所有已经定义的全局变量。可以通过$GLOBALS[‘变量名’]访问程序的所有全局变量，它比使用global访问全局变量更方便。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$a</span>;<span class="comment">//使用global声明$a为全局变量</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span> + <span class="number">10</span>;</span><br><span class="line"><span class="variable">$GLOBALS</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;b&#x27;</span>]+<span class="number">10</span>; <span class="comment">//使用$GLOBALS声明$a为全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">funct</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$a</span>,<span class="subst">$b</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>另外还有：$_COOKIE、$_GET、$_POST………………………..</p><h4 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h4><p>在PHP中，把程序中定义的变量叫做内部变量，而把表单中的变量(控件的名称)URL中的参数叫做外部变量，其值通过预定义变量$_GET、$_POST、$_REQUEST获得，</p><ul><li>$_GET[“表单变量”]：取得从客户端以GET方式传递过来的表单变量value值</li><li>$_POST[“表单变量”]：取得从客户端以POST方式传递过来的表单变量value值</li><li>$_REQUEST[“表单变量”]：取得从客户端以任意方式传递过来的表单变量value值<br> <img src="https://imglf3.lf127.net/img/0d1f30b00f5b2bea/S1N2ZTNIeU5LNUVrMVBRall6Y3JnMDk4NXRYanVNQ3F5UC9odDJRamQxUT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="服务器接收数据示意图"></li><li>$_REQUEST[“参数名”]：取得从客户端传递过来的参数值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;day3 分别用post和get的方式提交表单&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form name=&quot;form1&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">用POST发送学号：</span><br><span class="line">&lt;input type=&quot;number&quot; name=&quot;xh&quot; id=&quot;xh&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;button1&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form name=&quot;form2&quot; method=&quot;get&quot; action=&quot;&quot;&gt;&lt;/br&gt;</span><br><span class="line">用GET发送姓名：</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;xm&quot; id=&quot;xm&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;button2&quot; value=&quot;提交&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">//使用$_POST接收表单变量的值</span><br><span class="line">if(isset($_POST[&#x27;button1&#x27;]))</span><br><span class="line">echo &#x27;该生学号：&#x27;.$_POST[&#x27;xh&#x27;];</span><br><span class="line">//使用$_GET接收表单变量的值</span><br><span class="line">if(isset($_GET[&#x27;button2&#x27;]))</span><br><span class="line">echo &#x27;该生姓名：&#x27;.$_GET[&#x27;xm&#x27;];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础1-数据类型</title>
      <link href="/2022/10/22/PHP%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/22/PHP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP文件的组成"><a href="#PHP文件的组成" class="headerlink" title="PHP文件的组成"></a>PHP文件的组成</h4><p>PHP文件是一种文本文件，它既可以和HTML代码混合在一起，也可以单独编写纯PHP代码<br>具体来说一个PHP文件由以下几个部分组成<br>（1）HTML标记：一般作为页面中的布局，或者是页面中固定不变的部分<br>（2）Javascript脚本：由&lt;script language&#x3D;”JavaScript”&gt;与</script>扩住<br>（3）PHP脚本：以“&lt;?php”开始“?&gt;”结束。<br>除上述标记外，PHP脚本还允许使用其他样式的标记，这里就不一一叙述了。</p><p>其中，HTML标记，javaScript脚本在客户端运行，PHP脚本在服务器端运行。如果一个网页含有PHP脚本，那么该网页为动态网页，扩展名必须为.php</p><h4 id="PHP脚本中的注释"><a href="#PHP脚本中的注释" class="headerlink" title="PHP脚本中的注释"></a>PHP脚本中的注释</h4><p>类似C语言，可以有两种注释风格。<br>（1）单行注释：从&#x2F;&#x2F;开始直到行末，均属于注释部分。<br>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;世界上最好的语言PHP&#x27;</span>; <span class="comment">//不服来辩！</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（2）多行注释：从&#x2F; * 开始到 * &#x2F;结束，不管有多少行，均属于注释<br>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;世界上最好的语言PHP&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写代码是热爱</span></span><br><span class="line"><span class="comment">写到世界充满爱!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><p>PHP有两种输出语句<br>（1）print表达式<br>（2）echo表达式表<br>表达式中可以出现.号+号，常用的有以下几种形式<br>（1）字符串.字符串<br>（2）字符串.变量名<br>（3）字符串+字符串<br>（4）字符串+数值<br>注：在（1）（2）形式中，先统一为字符串，再运算，在（3）（4）形式中，先统一为数值，再运算，不能出现“字符串.数值”的形式<br>因为此处的.号出现二义性，举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;123&quot;</span> . <span class="string">&quot;abc&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：123abc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>. <span class="string">&quot;abc&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：123abc</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;123&quot;</span> + <span class="string">&quot;abc&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：123</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">123</span> + <span class="string">&quot;abc&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;<span class="comment">//输出：123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出每个表达式的类型和值"><a href="#输出每个表达式的类型和值" class="headerlink" title="输出每个表达式的类型和值"></a>输出每个表达式的类型和值</h4><p>格式：<br>var_dump(表达式，…，表达式)</p><p>列如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">2</span>+<span class="number">3</span>,<span class="variable">$x</span>);<span class="comment">//输出：int 5，Boolean true</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP数据类型"><a href="#PHP数据类型" class="headerlink" title="PHP数据类型"></a>PHP数据类型</h3><p>​PHP支持8种数据类型：int(整型)、float(浮点型)、string(字符串型)、boolean(布尔型)、array(数组)、object(对象)、NULL(空)和resource(资源)。<br>基本数据类型有4种：int(整型)、float(浮点型)、string(字符串型)、boolean(布尔型)，有常量和变量之分。</p><h4 id="int-整型"><a href="#int-整型" class="headerlink" title="(int)整型"></a>(int)整型</h4><p>​整型的值称为整型常量，简称整数，可以用十进制数，十六进制数，八进制数或二进制数(PHP 5.4.0)表示。十六进制数前面必须加0x，如 0x12；八进制数前面必须加0<br>如 012；二进制数前面必须加0b，如 0b1001</p><h4 id="float-浮点型"><a href="#float-浮点型" class="headerlink" title="(float)浮点型"></a>(float)浮点型</h4><p>​浮点型的值称为浮点型常量，有小数形式和指数形式两种表示法，小数形式如：0.0526，指数形式如：5.26e-2。<br>在指数形式中，e的前后必须有数字，且e的后面必须为整数</p><h4 id="string-字符串型"><a href="#string-字符串型" class="headerlink" title="(string)字符串型"></a>(string)字符串型</h4><p>​在PHP中，以英文单引号或双引号括住的一个或多个字符称为字符串常量。列如：’school’，”school”，’\n’<br>（1）单引号<br>​用两个单引号(‘)可以把一个字符串括起来，但要注意的是，如果这个字符串本身保护单引号(‘)，则必须写成(\‘)，<br>如果字符串本身包含(\‘)，则必须写成(\\‘)；如果字符串末尾刚好是一个反斜杠(\)，则必须写成双反斜杠(\\)。<br>列如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这个符号\&#x27;是单引号&#x27;</span>;<span class="comment">//输出：这个符号&#x27;是单引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这个符号\\\&#x27;是反斜杠加单引号&#x27;</span>; <span class="comment">//输出：这个符号\&#x27;是反斜杠加单引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这个字符串以反斜杠结尾\\&#x27;</span>;     <span class="comment">//输出：这个字符串以反斜杠结尾\</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这个字符串有\n，但不转义&#x27;</span>; <span class="comment">//输出：这个字符串有\n，但不转义</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>（2）双引号<br>用两个双引号(“)可以把一个字符串括起来，但要注意的是，这些字符串有特殊转义序列，</p><table><thead><tr><th>序列</th><th>显示效果或含义</th></tr></thead><tbody><tr><td>\</td><td>反斜杠(\)</td></tr><tr><td>&quot;</td><td>双引号(“)</td></tr><tr><td>\n</td><td>网页源文件中换行，但显示效果为空格(若无前后分隔时)</td></tr><tr><td>\r</td><td>同上</td></tr><tr><td>\t</td><td>网页源文件中水平制表符，但显示效果为空格(若无前后分隔时)</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\e</td><td>Esc</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>$</td><td>美元符号($)</td></tr><tr><td>[0-7]{1,3}</td><td>此正则表达式匹配一个用八进制数表示的字符</td></tr><tr><td>\x[0-9A-Fa-f]{1,2}</td><td>此正则表达式匹配一个用十六进制数表示的字符</td></tr></tbody></table><p>使用单引号和双引号的主要区别在于：单引号内出现的变量名不会被变量内容代替，但双引号内出现的变量名会被变量内容所代替。</p><p>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;加油&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;中国$str!&#x27;</span>;<span class="comment">//输出：中国$str！</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;中国<span class="subst">$str</span>!&quot;</span>;<span class="comment">//输出：中国加油！</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="boolean-布尔型"><a href="#boolean-布尔型" class="headerlink" title="(boolean)布尔型"></a>(boolean)布尔型</h4><p>​布尔型的取值只有两种：TRUE(真)和FALSE(假)，也可以用小写的true和false。布尔值在显示时，true显示为1，false显示为空。</p><h4 id="array-数组"><a href="#array-数组" class="headerlink" title="(array)数组"></a>(array)数组</h4><p>数组是一组“键名&#x2F;值”，“键名”在数组中是唯一的，可以是整数或字符串，键名省略时默认为从0开始的连续整数。“值”是由相应的键名映射的结果，值可以不唯一</p><p>举个栗子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>); <span class="comment">//不指定键名，直接赋值</span></span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&quot;王宝钏&quot;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">20</span>,<span class="string">&#x27;married&#x27;</span>=&gt;<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//指定键名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr1</span>[<span class="number">3</span>];<span class="comment">//输出：6</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr2</span>[<span class="string">&#x27;name&#x27;</span>];<span class="comment">//输出：王宝钏</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="object-对象"><a href="#object-对象" class="headerlink" title="(object)对象"></a>(object)对象</h4><p>“对象”这个概念是面向对象编程里面的概念，一时半会儿说不明白，后面再说</p><h4 id="NULL-空-类型"><a href="#NULL-空-类型" class="headerlink" title="(NULL)空 类型"></a>(NULL)空 类型</h4><p>NULL类型只有一种取值，就是NULL(不区分大小写)。一个变量在下列情况下被认为是NULL</p><p>（1）被直接赋值为NULL</p><p>（2）尚未被赋值</p><p>（3）被unset()函数销毁。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$var1</span> = <span class="literal">NULL</span>;</span><br><span class="line"><span class="variable">$var2</span>;</span><br><span class="line"><span class="variable">$var3</span> = <span class="string">&quot;school&quot;</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$var3</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$var1</span>);<span class="comment">//直接输出NULL</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$var2</span>);<span class="comment">//先显示未定义，再输出NULL</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$var3</span>);<span class="comment">//先显示未定义，在输出NULL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="resource-资源类型"><a href="#resource-资源类型" class="headerlink" title="(resource) 资源类型"></a>(resource) 资源类型</h4><p>resource资源是一种特殊的变量，它相当于一个外部资源的引用，例如一个“数据库连接”就是一个资源。</p>]]></content>
      
      
      <categories>
          
          <category> PHP学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用琐碎知识，复制粘贴方便</title>
      <link href="/2022/10/20/Linux/"/>
      <url>/2022/10/20/Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="查看安全日志"><a href="#查看安全日志" class="headerlink" title="查看安全日志"></a>查看安全日志</h2><h4 id="查看成功登录的IP-和次数"><a href="#查看成功登录的IP-和次数" class="headerlink" title="查看成功登录的IP 和次数"></a>查看成功登录的IP 和次数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /var/log/secure* |grep &#x27;Accepted password&#x27; |awk &#x27;&#123;print $(NF-3)&#125;&#x27; |sort -n |uniq -c |awk &#x27;&#123;print $2,&quot;成功登录了 &quot;$1,&quot; 次&quot;&#125;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="查看失败登录的IP和次数"><a href="#查看失败登录的IP和次数" class="headerlink" title="查看失败登录的IP和次数"></a>查看失败登录的IP和次数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /var/log/secure* |grep &#x27;Failed password&#x27; |awk &#x27;&#123;print $(NF-3)&#125;&#x27; |sort -n |uniq -c |awk &#x27;&#123;print $2,&quot;登录失败了: &quot;$1,&quot; 次&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="硬件资源"><a href="#硬件资源" class="headerlink" title="硬件资源"></a>硬件资源</h2><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><h5 id="top参数详解"><a href="#top参数详解" class="headerlink" title="top参数详解"></a>top参数详解</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">　　s- 改变画面更新频率</span><br><span class="line"></span><br><span class="line">　　l - 关闭或开启第一部分第一行 top 信息的表示</span><br><span class="line"></span><br><span class="line">　　t - 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示</span><br><span class="line"></span><br><span class="line">　　m - 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示</span><br><span class="line"></span><br><span class="line">　　N - 以 PID 的大小的顺序排列表示进程列表（第三部分后述）</span><br><span class="line"></span><br><span class="line">　　P - 以 CPU 占用率大小的顺序排列进程列表 （第三部分后述）</span><br><span class="line"></span><br><span class="line">　　M - 以内存占用率大小的顺序排列进程列表 （第三部分后述）</span><br><span class="line"></span><br><span class="line">　　h - 显示帮助</span><br><span class="line"></span><br><span class="line">　　n - 设置在进程列表所显示进程的数量</span><br><span class="line"></span><br><span class="line">　　q - 退出 top</span><br><span class="line"></span><br><span class="line">　　s -改变画面更新周期</span><br></pre></td></tr></table></figure><h5 id="top查看cpu信息和内存信息"><a href="#top查看cpu信息和内存信息" class="headerlink" title="top查看cpu信息和内存信息"></a>top查看cpu信息和内存信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">top</span><br><span class="line"></span><br><span class="line">top - 00:15:46 up 48 days,  8:39,  3 <span class="built_in">users</span>,  load average: 0.07, 0.10, 0.17</span><br><span class="line">Tasks: 219 total,   2 running, 217 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  6.8 us,  2.7 sy,  0.0 ni, 89.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.1 si,  1.4 st</span><br><span class="line">KiB Mem :  8008648 total,   262380 free,  4203884 used,  3542384 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  3087740 avail Mem </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一行（top）：</span><br><span class="line">　　00:15:46  系统当前时刻</span><br><span class="line">　　48 days 系统启动后到现在的运作时间</span><br><span class="line">　　3 <span class="built_in">users</span> 当前登录到系统的用户，更确切的说是登录到用户的终端数 -- 同一个用户同一时间对系统多个终端的连接将被视为多个用户连接到系统，这里的用户数也将表现为终端的数目</span><br><span class="line">　　load average 当前系统负载的平均值，后面的三个值分别为1分钟前、5分钟前、15分钟前进程的平均数，一般的可以认为这个数值超过 CPU 数目时，CPU 将比较吃力的负载当前系统所包含的进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二行（Tasks）：</span><br><span class="line">　　219 total 当前系统进程总数</span><br><span class="line">　　2 running 当前运行中的进程数</span><br><span class="line">　　217 sleeping 当前处于等待状态中的进程数</span><br><span class="line">　　0 stoped 被停止的系统进程数</span><br><span class="line">　　0 zombie 僵尸进程数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三行（Cpus）：</span><br><span class="line">　　6.8% us 用户空间占用CPU百分比</span><br><span class="line">　　2.7% sy 内核空间占用CPU百分比</span><br><span class="line">　　0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class="line">　　89.0% <span class="built_in">id</span> 空闲CPU百分比</span><br><span class="line">　　0.0% wa 等待输入输出的CPU时间百分比</span><br><span class="line">　　0.0% hi</span><br><span class="line">　　0.1% si</span><br><span class="line">　　0.0% st</span><br><span class="line">　　</span><br><span class="line"></span><br><span class="line">第四行（Mem）：</span><br><span class="line">　　8008648 total 物理内存总量</span><br><span class="line">　　262380 used 使用的物理内存总量</span><br><span class="line">　　4203884 free 空闲内存总量</span><br><span class="line">　　3542384 buffers 用作内核缓存的内存量</span><br><span class="line"></span><br><span class="line">第五行（Swap）：</span><br><span class="line"><span class="comment">#表示类别同第四行（Mem），但此处反映着交换分区（Swap）的使用情况。通常，交换分区（Swap）被频繁使用的情况，将被视作物理内存不足而造成的。</span></span><br><span class="line">　　0 total 交换区总量</span><br><span class="line">　　0 used 使用的交换区总量</span><br><span class="line">　　0 free 空闲交换区总量</span><br><span class="line">　　0 cached 缓冲的交换区总量</span><br><span class="line">　　</span><br></pre></td></tr></table></figure><h4 id="sar"><a href="#sar" class="headerlink" title="sar"></a>sar</h4><h5 id="sar查看cpu"><a href="#sar查看cpu" class="headerlink" title="sar查看cpu"></a>sar查看cpu</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有cpu使用情况，每1秒采集一次CPU使用率，共采集5次</span></span><br><span class="line">sar -u 1 5</span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (gitlab) 07/31/2022 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">12:11:26 AM     CPU     %user     %<span class="built_in">nice</span>   %system   %iowait    %steal     %idle</span><br><span class="line">12:11:27 AM     all      7.11      0.00      1.78      0.25      0.76     90.10</span><br><span class="line">12:11:28 AM     all      3.30      0.00      1.52      0.00      0.76     94.42</span><br><span class="line">12:11:29 AM     all      2.82      0.00      1.54      0.00      1.28     94.36</span><br><span class="line">12:11:30 AM     all      3.84      0.00      2.05      0.00      0.77     93.35</span><br><span class="line">12:11:31 AM     all      2.26      0.00      1.00      0.00      1.00     95.74</span><br><span class="line">Average:        all      3.86      0.00      1.58      0.05      0.91     93.60</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定显示1号cpu 的使用情况，每1秒采集一次CPU使用率，共采集5次</span></span><br><span class="line">sar -P 1 -u 1 5</span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (gitlab) 07/31/2022 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">12:12:10 AM     CPU     %user     %<span class="built_in">nice</span>   %system   %iowait    %steal     %idle</span><br><span class="line">12:12:11 AM       1      1.00      0.00      2.00      0.00      2.00     95.00</span><br><span class="line">12:12:12 AM       1      2.00      0.00      1.00      0.00      2.00     95.00</span><br><span class="line">12:12:13 AM       1     20.20      0.00      2.02      0.00      0.00     77.78</span><br><span class="line">12:12:14 AM       1      3.06      0.00      0.00      0.00      0.00     96.94</span><br><span class="line">12:12:15 AM       1      3.03      0.00      2.02      0.00      1.01     93.94</span><br><span class="line">Average:          1      5.85      0.00      1.41      0.00      1.01     91.73</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数解释：  </span></span><br><span class="line">  </span><br><span class="line">%user：显示在用户级别(application)运行使用 CPU 总时间的百分比  </span><br><span class="line">%<span class="built_in">nice</span>：显示在用户级别，用于<span class="built_in">nice</span>操作，所占用 CPU 总时间的百分比  </span><br><span class="line">%system：在核心级别(kernel)运行所使用 CPU 总时间的百分比  </span><br><span class="line">%iowait：显示用于等待I/O操作占用 CPU 总时间的百分比  </span><br><span class="line">%idle：显示 CPU 空闲时间占用 CPU 总时间的百分比  </span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是三种常见的场景：</span></span><br><span class="line">   1）若 %iowait 的值过高，表示硬盘存在I/O瓶颈</span><br><span class="line">   2）若 %idle 的值高但系统响应慢时，有可能是 CPU 等待分配内存，此时应加大内存容量</span><br><span class="line">   3）若 %idle 的值持续低于1，则系统的 CPU 处理能力相对较低，表明系统中最需要解决的资源是 CPU</span><br></pre></td></tr></table></figure><h5 id="sar查看内存"><a href="#sar查看内存" class="headerlink" title="sar查看内存"></a>sar查看内存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sar -r 5 4 </span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (gitlab) 07/31/2022 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">12:39:45 AM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">12:39:50 AM    209448   7799200     97.38    163000   3086128   6621856     82.68   5525224   1600276       188</span><br><span class="line">12:39:55 AM    211692   7796956     97.36    163000   3086168   6622044     82.69   5523608   1600316       304</span><br><span class="line">12:40:00 AM    201168   7807480     97.49    163000   3086276   6622044     82.69   5534384   1600364       416</span><br><span class="line">12:40:05 AM    221568   7787080     97.23    163000   3086296   6620800     82.67   5513964   1600384       456</span><br><span class="line">Average:       210969   7797679     97.37    163000   3086217   6621686     82.68   5524295   1600335       341</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数解释：  </span></span><br><span class="line">kbmemfree：剩余可用内存、单位K  </span><br><span class="line">kbmemused：已用内存、以K 为单位、该值不考虑内核自身所使用的内存  </span><br><span class="line">%memused：已用内存百分比  </span><br><span class="line">kbbuffers：已用buffer(内核所用)、单位K  </span><br><span class="line">kbcached：已用cache（内核所用）、单位K  </span><br><span class="line">kbswpfree：剩余Swap、单位K  </span><br><span class="line">kbswpused：已用Swap、单位K  </span><br><span class="line">%swpused：已用Swap百分比  </span><br><span class="line">kbswpcad：被缓存的Swap、单位K  </span><br></pre></td></tr></table></figure><h5 id="sar监测网卡速度"><a href="#sar监测网卡速度" class="headerlink" title="sar监测网卡速度"></a>sar监测网卡速度</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sar -n DEV 1</span><br><span class="line"></span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (gitlab) 07/31/2022 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">12:42:59 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</span><br><span class="line">12:43:00 AM veth2707ccd      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM veth1530445      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM vethdf37848      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM      eth0     23.00      0.00      1.46      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM      eth1    108.00      0.00      6.41      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM veth4456dfb      1.00      0.00      0.07      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM veth3541656      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM veth4e64e35      0.00      0.00      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:43:00 AM   docker0      1.00      0.00      0.06      0.00      0.00      0.00      0.00</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数解释：  </span></span><br><span class="line">rxpck/s：每秒接收数据包的数量</span><br><span class="line">txpck/s：每秒发送数据包的数量</span><br><span class="line">rxkb/s：每秒接收的数据大小，单位kb</span><br><span class="line">txkb/s：每秒发送的数据大小，单位kb</span><br><span class="line">rxcmp/s：每秒接收的压缩包的数量</span><br><span class="line">txcmp/s：每秒发送的压缩包的数量</span><br><span class="line">rxmcst/s：每秒接收的多播数据包数量</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sar监测磁盘IO</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sar -b 3 5 </span><br><span class="line"></span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (gitlab) 07/31/2022 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">12:45:56 AM       tps      rtps      wtps   bread/s   bwrtn/s</span><br><span class="line">12:45:59 AM     10.33      0.00     10.33      0.00    320.00</span><br><span class="line">12:46:02 AM      0.00      0.00      0.00      0.00      0.00</span><br><span class="line">12:46:05 AM     10.33      0.00     10.33      0.00    141.33</span><br><span class="line">12:46:08 AM      1.67      0.00      1.67      0.00     88.00</span><br><span class="line">12:46:11 AM      1.67      0.00      1.67      0.00    138.67</span><br><span class="line">Average:         4.80      0.00      4.80      0.00    137.60</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数解释：  </span></span><br><span class="line">  </span><br><span class="line">tps：每秒磁盘的 I/O 传输总量  </span><br><span class="line">rtps：每秒从磁盘读出的数据总量  </span><br><span class="line">wtps：每秒向磁盘写入的数据总量  </span><br><span class="line">bread/s：每秒从磁盘读出的数据量，单位为 块/s  </span><br><span class="line">bwrtn/s：每秒向磁盘写入的数据量，单位为 块/s  </span><br></pre></td></tr></table></figure><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7.6G        4.1G        2.6G        401M        980M        2.9G</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出简介</span><br><span class="line"></span><br><span class="line">下面先解释一下输出的内容：</span><br><span class="line"> Mem 行(第二行)是内存的使用情况。</span><br><span class="line"> Swap 行(第三行)是交换空间的使用情况。</span><br><span class="line"> total 列显示系统总的可用物理内存和交换空间大小。</span><br><span class="line"> used 列显示已经被使用的物理内存和交换空间。</span><br><span class="line"> free 列显示还有多少物理内存和交换空间可用使用。</span><br><span class="line"> shared 列显示被共享使用的物理内存大小。</span><br><span class="line"> buff/cache 列显示被 buffer 和 cache 使用的物理内存大小。</span><br><span class="line"> available 列显示还可以被应用程序使用的物理内存大小。</span><br><span class="line"></span><br><span class="line">我想只有在理解了一些基本概念之后，上面的输出才能帮助我们了解系统的内存状况。</span><br><span class="line"></span><br><span class="line">buff/cache</span><br><span class="line"></span><br><span class="line">先来提一个问题： buffer 和 cache 应该是两种类型的内存，但是 free 命令为什么会把它们放在一起呢？要回答这个问题需要我们做些准备工作。让我们先来搞清楚 buffer 与 cache 的含义。</span><br><span class="line"></span><br><span class="line">buffer 在操作系统中指 buffer cache， 中文一般翻译为 “缓冲区”。要理解缓冲区，必须明确另外两个概念：”扇区” 和 “块”。扇区是设备的最小寻址单元，也叫 “硬扇区” 或 “设备块”。块是操作系统中文件系统的最小寻址单元，也叫 “文件块” 或 “I/O 块”。每个块包含一个或多个扇区，但大小不能超过一个页面，所以一个页可以容纳一个或多个内存中的块。当一个块被调入内存时，它要存储在一个缓冲区中。每个缓冲区与一个块对应，它相当于是磁盘块在内存中的表示(下图来自互联网)：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意，buffer cache 只有块的概念而没有文件的概念，它只是把磁盘上的块直接搬到内存中而不关心块中究竟存放的是什么格式的文件。</span><br><span class="line"></span><br><span class="line">cache 在操作系统中指 page cache，中文一般翻译为 “页高速缓存”。页高速缓存是内核实现的磁盘缓存。它主要用来减少对磁盘的 I/O 操作。具体地讲，是通过把磁盘中的数据缓存到物理内存中，把对磁盘的访问变为对物理内存的访问。页高速缓存缓存的是内存页面。缓存中的页来自对普通文件、块设备文件(这个指的就是 buffer cache 呀)和内存映射文件的读写。 </span><br><span class="line"></span><br><span class="line">页高速缓存对普通文件的缓存我们可以这样理解：当内核要读一个文件(比如 /etc/hosts)时，它会先检查这个文件的数据是不是已经在页高速缓存中了。如果在，就放弃访问磁盘，直接从内存中读取。这个行为称为缓存命中。如果数据不在缓存中，就是未命中缓存，此时内核就要调度块 I/O 操作从磁盘去读取数据。然后内核将读来的数据放入页高速缓存中。这种缓存的目标是文件系统可以识别的文件(比如 /etc/hosts)。 </span><br><span class="line"></span><br><span class="line">页高速缓存对块设备文件的缓存就是我们在前面介绍的 buffer cahce。因为独立的磁盘块通过缓冲区也被存入了页高速缓存(缓冲区最终是由页高速缓存来承载的)。</span><br><span class="line"></span><br><span class="line">到这里我们应该搞清楚了：无论是缓冲区还是页高速缓存，它们的实现方式都是一样的。缓冲区只不过是一种概念上比较特殊的页高速缓存罢了。 </span><br><span class="line"></span><br><span class="line">那么为什么 free 命令不直接称为 cache 而非要写成 buff/cache？ 这是因为缓冲区和页高速缓存的实现并非天生就是统一的。在 linux 内核 2.4 中才将它们统一。更早的内核中有两个独立的磁盘缓存：页高速缓存和缓冲区高速缓存。前者缓存页面，后者缓存缓冲区。当你知道了这些故事之后，输出中列的名称可能已经不再重要了。</span><br><span class="line"></span><br><span class="line">free 与 available</span><br><span class="line"></span><br><span class="line">在 free 命令的输出中，有一个 free 列，同时还有一个 available 列。这二者到底有何区别？ </span><br><span class="line"></span><br><span class="line">free 是真正尚未被使用的物理内存数量。至于 available 就比较有意思了，它是从应用程序的角度看到的可用内存数量。Linux 内核为了提升磁盘操作的性能，会消耗一部分内存去缓存磁盘数据，就是我们介绍的 buffer 和 cache。所以对于内核来说，buffer 和 cache 都属于已经被使用的内存。当应用程序需要内存时，如果没有足够的 free 内存可以用，内核就会从 buffer 和 cache 中回收内存来满足应用程序的请求。所以从应用程序的角度来说，available = free + buffer + cache。请注意，这只是一个很理想的计算方式，实际中的数据往往有较大的误差</span><br></pre></td></tr></table></figure><h5 id="将buff-x2F-cache-内存释放-变成free内存"><a href="#将buff-x2F-cache-内存释放-变成free内存" class="headerlink" title="将buff&#x2F;cache  内存释放 变成free内存"></a>将buff&#x2F;cache  内存释放 变成free内存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><h2 id="sshd"><a href="#sshd" class="headerlink" title="sshd"></a>sshd</h2><h4 id="修改ssh默认端口号为24522"><a href="#修改ssh默认端口号为24522" class="headerlink" title="修改ssh默认端口号为24522"></a>修改ssh默认端口号为24522</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s@#Port 22@Port 24522@&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">sed -i <span class="string">&#x27;s/ 22 / 24522 /&#x27;</span> /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">systemctl restart sshd.service iptables.service</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h4 id="配置ssh免密码登录服务器"><a href="#配置ssh免密码登录服务器" class="headerlink" title="配置ssh免密码登录服务器"></a>配置ssh免密码登录服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">在自己电脑上使用git bash 使用命令</span><br><span class="line">xsx@DESKTOP-GPD8SA9 MINGW64 /e/Desktop</span><br><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/xsx/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/c/Users/xsx/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/xsx/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/xsx/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:sTQi+vEbaTvfSNx081lHCKI+El2dSiprz8RASoPzMuU xsx@DESKTOP-GPD8SA9</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|   .      o...   |</span></span><br><span class="line"><span class="string">|  o + .. o..o. . |</span></span><br><span class="line"><span class="string">|   *.+o *o .  . .|</span></span><br><span class="line"><span class="string">|  o.E.o=.+.    . |</span></span><br><span class="line"><span class="string">|  .o. .=S . o   o|</span></span><br><span class="line"><span class="string">|   . oo+o+ . o o.|</span></span><br><span class="line"><span class="string">|    ..=+o .   o  |</span></span><br><span class="line"><span class="string">|     ..=oo       |</span></span><br><span class="line"><span class="string">|      ooo .      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/c/Users/xsx/.ssh/id_rsa</span></span><br><span class="line"><span class="string">/c/Users/xsx/.ssh/id_rsa.pub</span></span><br><span class="line"><span class="string">#将id_rsa.pub. 放到服务器/root/.ssh/authorized_keys  这个时候再用我们的id_rsa 私钥就可以去远程连接服务器了</span></span><br></pre></td></tr></table></figure><h4 id="配置ssh禁止使用密码登录服务器"><a href="#配置ssh禁止使用密码登录服务器" class="headerlink" title="配置ssh禁止使用密码登录服务器"></a>配置ssh禁止使用密码登录服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/PasswordAuthentication yes/PasswordAuthentication no/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl stop sshd &amp;&amp; systemctl start sshd</span><br></pre></td></tr></table></figure><h4 id="sshd-config-配置"><a href="#sshd-config-配置" class="headerlink" title="sshd_config 配置"></a>sshd_config 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">ForwardAgent no</span><br><span class="line"><span class="string">&quot;ForwardAgent&quot;</span>设置连接是否经过验证代理（如果存在）转发给远程计算机。</span><br><span class="line"></span><br><span class="line">ForwardX11 no</span><br><span class="line"><span class="string">&quot;ForwardX11&quot;</span>设置X11连接是否被自动重定向到安全的通道和显示集（DISPLAY <span class="built_in">set</span>）。</span><br><span class="line"></span><br><span class="line">RhostsAuthentication no</span><br><span class="line"><span class="string">&quot;RhostsAuthentication&quot;</span>设置是否使用基于rhosts的安全验证。</span><br><span class="line"></span><br><span class="line">RhostsRSAAuthentication no</span><br><span class="line"><span class="string">&quot;RhostsRSAAuthentication&quot;</span>设置是否使用用RSA算法的基于rhosts的安全验证。</span><br><span class="line"></span><br><span class="line">RSAAuthentication <span class="built_in">yes</span></span><br><span class="line"><span class="string">&quot;RSAAuthentication&quot;</span>设置是否使用RSA算法进行安全验证。</span><br><span class="line"></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span></span><br><span class="line"><span class="string">&quot;PasswordAuthentication&quot;</span>设置是否使用口令验证。</span><br><span class="line"></span><br><span class="line">FallBackToRsh no</span><br><span class="line">“FallBackToRsh<span class="string">&quot;设置如果用ssh连接出现错误是否自动使用rsh，由于rsh并不安全，所以此选项应当设置为&quot;</span>no”。</span><br><span class="line"></span><br><span class="line">UseRsh no</span><br><span class="line">“UseRsh<span class="string">&quot;设置是否在这台计算机上使用&quot;</span>rlogin/rsh”，原因同上，设为<span class="string">&quot;no&quot;</span>。</span><br><span class="line"></span><br><span class="line">BatchMode no</span><br><span class="line">“BatchMode”：批处理模式，一般设为<span class="string">&quot;no&quot;</span>；如果设为<span class="string">&quot;yes&quot;</span>，交互式输入口令的提示将被禁止，这个选项对脚本文件和批处理任务十分有用。</span><br><span class="line"></span><br><span class="line">CheckHostIP <span class="built_in">yes</span></span><br><span class="line">“CheckHostIP<span class="string">&quot;设置ssh是否查看连接到服务器的主机的IP地址以防止DNS欺骗。建议设置为&quot;</span><span class="built_in">yes</span>”。</span><br><span class="line"></span><br><span class="line">StrictHostKeyChecking no</span><br><span class="line">“StrictHostKeyChecking<span class="string">&quot;如果设为&quot;</span><span class="built_in">yes</span>”，ssh将不会自动把计算机的密匙加入<span class="string">&quot;<span class="variable">$HOME</span>/.ssh/known_hosts&quot;</span>文件，且一旦计算机的密匙发生了变化，就拒绝连接。</span><br><span class="line"></span><br><span class="line">IdentityFile ~/.ssh/identity</span><br><span class="line"><span class="string">&quot;IdentityFile&quot;</span>设置读取用户的RSA安全验证标识。</span><br><span class="line"></span><br><span class="line">Port 22</span><br><span class="line"><span class="string">&quot;Port&quot;</span>设置连接到远程主机的端口，ssh默认端口为22。</span><br><span class="line"></span><br><span class="line">Cipher blowfish</span><br><span class="line">“Cipher”设置加密用的密钥，blowfish可以自己随意设置。</span><br><span class="line"></span><br><span class="line">EscapeChar</span><br><span class="line">“EscapeChar”设置escape字符</span><br></pre></td></tr></table></figure><h2 id="shell-常用脚本"><a href="#shell-常用脚本" class="headerlink" title="shell 常用脚本"></a>shell 常用脚本</h2><h4 id="检查IP能否ping通"><a href="#检查IP能否ping通" class="headerlink" title="检查IP能否ping通"></a>检查IP能否ping通</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将123.58.2.0/24网络中可以ping通的偶数IP打印出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 2 2 254` ; <span class="keyword">do</span> ping -c 1 -w 1 -s 1 123.58.2.<span class="variable">$i</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> 123.58.2.<span class="variable">$i</span> ; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="只对当前目录排序，并用直观的大小显示出来"><a href="#只对当前目录排序，并用直观的大小显示出来" class="headerlink" title="只对当前目录排序，并用直观的大小显示出来"></a>只对当前目录排序，并用直观的大小显示出来</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">ls</span> -l |grep <span class="string">&#x27;^d&#x27;</span> |<span class="built_in">du</span> -s *|<span class="built_in">sort</span> -nr|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>);<span class="keyword">do</span> <span class="built_in">du</span> -sh <span class="variable">$i</span>;<span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="报错：line-38-’-r’-command-not-found"><a href="#报错：line-38-’-r’-command-not-found" class="headerlink" title="报错：line 38: $’\r’: command not found"></a>报错：line 38: $’\r’: command not found</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux 上shell下载到windows上可能给转换了格式，需要重新设置一下</span><br></pre></td></tr></table></figure><h2 id="date时间"><a href="#date时间" class="headerlink" title="date时间"></a>date时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示当前的时间</span></span><br><span class="line">[root@5eb1r /]<span class="comment"># date</span></span><br><span class="line">Mon Jun 20 15:31:36 CST 2022</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示三个月前时间</span></span><br><span class="line">[root@5eb1r /]<span class="comment">#  date  +%Y%m%d -d &quot;+3 month ago&quot;</span></span><br><span class="line">20220320</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示三个月后时间</span></span><br><span class="line">[root@5eb1r /]<span class="comment">#  date  +%Y%m%d -d &quot;+3 month &quot;</span></span><br><span class="line">20220920</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示三天前时间</span></span><br><span class="line">[root@5eb1r /]<span class="comment">#  date  +%Y%m%d -d &quot;+3 day ago &quot;</span></span><br><span class="line">20220617</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示三天后时间</span></span><br><span class="line">[root@5eb1r /]<span class="comment">#  date  +%Y%m%d -d &quot;+3 day &quot;</span></span><br><span class="line">20220623</span><br><span class="line"></span><br><span class="line"><span class="comment">#n默认为1</span></span><br><span class="line">[root@5eb1r /]<span class="comment">#  date  +%Y%m%d -d &quot;+n day &quot;</span></span><br><span class="line">20220621</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><h4 id="ls按照时间排序查看"><a href="#ls按照时间排序查看" class="headerlink" title="ls按照时间排序查看"></a>ls按照时间排序查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#升序排列是按照数据从低到高排列，降序排列是数据从高到低排列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span>按时间 降序 排列： <span class="built_in">ls</span> -lt </span><br><span class="line"><span class="built_in">ls</span>按时间 升序 排列：<span class="built_in">ls</span> -lrt</span><br><span class="line"></span><br><span class="line">ll -htr (最好用)</span><br><span class="line">-h 单位显示更直观查看</span><br><span class="line"><span class="built_in">sort</span> -n  排序</span><br><span class="line"><span class="built_in">uniq</span> -c  去重</span><br></pre></td></tr></table></figure><h4 id="ls按照文件大小排序查看"><a href="#ls按照文件大小排序查看" class="headerlink" title="ls按照文件大小排序查看"></a>ls按照文件大小排序查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 降序</span></span><br><span class="line"><span class="built_in">ls</span> -Sl </span><br><span class="line"></span><br><span class="line"><span class="comment">#升序</span></span><br><span class="line"><span class="built_in">ls</span> -Slr</span><br><span class="line"></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1</span><br></pre></td></tr></table></figure><h4 id="对当前目录和文件大小排序"><a href="#对当前目录和文件大小排序" class="headerlink" title="对当前目录和文件大小排序"></a>对当前目录和文件大小排序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -s * |<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure><h4 id="只对当前目录排序，并用直观的大小显示出来-1"><a href="#只对当前目录排序，并用直观的大小显示出来-1" class="headerlink" title="只对当前目录排序，并用直观的大小显示出来"></a>只对当前目录排序，并用直观的大小显示出来</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">ls</span> -l |grep <span class="string">&#x27;^d&#x27;</span> |<span class="built_in">du</span> -s *|<span class="built_in">sort</span> -nr|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>);<span class="keyword">do</span> <span class="built_in">du</span> -sh <span class="variable">$i</span>;<span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">ls</span> [-alrtAFR] [name...]</span><br><span class="line">参数 :</span><br><span class="line"></span><br><span class="line">-a 显示所有文件及目录 (. 开头的隐藏文件也会列出)</span><br><span class="line">-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</span><br><span class="line">-r 将文件以相反次序显示(原定依英文字母次序)</span><br><span class="line">-t 将文件依建立时间之先后次序列出</span><br><span class="line">-A 同 -a ，但不列出 <span class="string">&quot;.&quot;</span> (目前目录) 及 <span class="string">&quot;..&quot;</span> (父目录)</span><br><span class="line">-F 在列出的文件名称后加一符号；例如可执行档则加 <span class="string">&quot;*&quot;</span>, 目录则加 <span class="string">&quot;/&quot;</span></span><br><span class="line">-R 若目录下有文件，则以下之文件亦皆依序列出</span><br></pre></td></tr></table></figure><h2 id="iptables防火墙"><a href="#iptables防火墙" class="headerlink" title="iptables防火墙"></a>iptables防火墙</h2><h4 id="卸载firewalld安装iptables"><a href="#卸载firewalld安装iptables" class="headerlink" title="卸载firewalld安装iptables"></a>卸载firewalld安装iptables</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭firewalld并禁止开机自启</span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld  </span><br><span class="line"></span><br><span class="line"><span class="comment">#  配置阿里云yum源，epel源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装IPtables</span></span><br><span class="line">yum install -y iptables-services</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service &amp;&amp; systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">enable</span> iptables.service &amp;&amp; systemctl start iptables.service </span><br></pre></td></tr></table></figure><h4 id="根据默认规则进行优化"><a href="#根据默认规则进行优化" class="headerlink" title="根据默认规则进行优化"></a>根据默认规则进行优化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/sysconfig/iptables &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">*filter</span></span><br><span class="line"><span class="string">:INPUT ACCEPT [0:0]</span></span><br><span class="line"><span class="string">:FORWARD ACCEPT [0:0]</span></span><br><span class="line"><span class="string">:OUTPUT ACCEPT [0:0]</span></span><br><span class="line"><span class="string">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span></span><br><span class="line"><span class="string">-A INPUT -p icmp -j ACCEPT</span></span><br><span class="line"><span class="string">-A INPUT -i lo -j ACCEPT</span></span><br><span class="line"><span class="string">-A INPUT -p tcp -m state --state NEW -m tcp --dport 24522 -j ACCEPT</span></span><br><span class="line"><span class="string">-A INPUT -j DROP</span></span><br><span class="line"><span class="string">-A FORWARD -j DROP</span></span><br><span class="line"><span class="string">COMMIT</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使修改的配置文件生效</span></span><br><span class="line">systemctl reload iptables.service</span><br></pre></td></tr></table></figure><h4 id="四表五链讲解"><a href="#四表五链讲解" class="headerlink" title="四表五链讲解"></a>四表五链讲解</h4><p>iptables具有Filter, NAT, Mangle, Raw四种内建表：</p><h5 id="1-Filter表"><a href="#1-Filter表" class="headerlink" title="1.Filter表"></a>1.Filter表</h5><p>Filter表示iptables的默认表，因此如果你没有自定义表，那么就默认使用filter表，它具有以下三种内建链：</p><ul><li><strong>INPUT链</strong> – 处理来自外部的数据。</li><li><strong>OUTPUT链</strong> – 处理向外发送的数据。</li><li><strong>FORWARD链</strong> – 将数据转发到本机的其他网卡设备上。</li></ul><h5 id="2-NAT表"><a href="#2-NAT表" class="headerlink" title="2.NAT表"></a>2.NAT表</h5><p>NAT表有三种内建链：</p><ul><li><strong>PREROUTING链</strong> – 处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标IP地址（destination ip address），通常用于DNAT(destination NAT)。</li><li><strong>POSTROUTING链</strong> – 处理即将离开本机的数据包。它会转换数据包中的源IP地址（source ip address），通常用于SNAT（source NAT）。</li><li><strong>OUTPUT链</strong> – 处理本机产生的数据包。</li></ul><h5 id="3-Mangle表"><a href="#3-Mangle表" class="headerlink" title="3. Mangle表"></a><strong>3. Mangle表</strong></h5><p>Mangle表用于指定如何处理数据包。它能改变TCP头中的QoS位。Mangle表具有5个内建链：</p><ul><li>PREROUTING</li><li>OUTPUT</li><li>FORWARD</li><li>INPUT</li><li>POSTROUTING</li></ul><h5 id="4-Raw表"><a href="#4-Raw表" class="headerlink" title="4. Raw表"></a><strong>4. Raw表</strong></h5><p>Raw表用于处理异常，它具有2个内建链：</p><ul><li>PREROUTING chain</li><li>OUTPUT chain</li></ul><h4 id="参数选项和规则语法"><a href="#参数选项和规则语法" class="headerlink" title="参数选项和规则语法"></a>参数选项和规则语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">iptables(选项)(参数)</span><br><span class="line"></span><br><span class="line">-t&lt;表&gt;：指定要操纵的表；</span><br><span class="line">-A：向规则链中添加条目；</span><br><span class="line">-D：从规则链中删除条目；</span><br><span class="line">-i：向规则链中插入条目；</span><br><span class="line">-R：替换规则链中的条目；</span><br><span class="line">-L：显示规则链中已有的条目；</span><br><span class="line">-F：清楚规则链中已有的条目；</span><br><span class="line">-Z：清空规则链中的数据包计算器和字节计数器；</span><br><span class="line">-N：创建新的用户自定义规则链；</span><br><span class="line">-P：定义规则链中的默认目标；</span><br><span class="line">-h：显示帮助信息；</span><br><span class="line">-p：指定要匹配的数据包协议类型；</span><br><span class="line">-s：指定要匹配的数据包源ip地址；</span><br><span class="line">-j&lt;目标&gt;：指定要跳转的目标；</span><br><span class="line">-i&lt;网络接口&gt;：指定数据包进入本机的网络接口；</span><br><span class="line">-o&lt;网络接口&gt;：指定数据包要离开本机所使用的网络接口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iptables -t 表名 &lt;-A/I/D/R&gt; 规则链名 [规则号] &lt;-i/o 网卡名&gt; -p 协议名 &lt;-s 源IP/源子网&gt; --sport 源端口 &lt;-d 目标IP/目标子网&gt; --dport 目标端口 -j 动作</span><br></pre></td></tr></table></figure><h5 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h5><h6 id="开放指定的端口"><a href="#开放指定的端口" class="headerlink" title="开放指定的端口"></a><strong>开放指定的端口</strong></h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT               <span class="comment">#允许本地回环接口(即运行本机访问本机)</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT    <span class="comment">#允许已建立的或相关连的通行</span></span><br><span class="line">iptables -A OUTPUT -j ACCEPT         <span class="comment">#允许所有本机向外的访问</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT    <span class="comment">#允许访问22端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT    <span class="comment">#允许访问80端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT    <span class="comment">#允许ftp服务的21端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 20 -j ACCEPT    <span class="comment">#允许FTP服务的20端口</span></span><br><span class="line">iptables -A INPUT -j reject       <span class="comment">#禁止其他未允许的规则访问</span></span><br><span class="line">iptables -A FORWARD -j REJECT     <span class="comment">#禁止其他未允许的规则访问</span></span><br></pre></td></tr></table></figure><h6 id="屏蔽IP"><a href="#屏蔽IP" class="headerlink" title="屏蔽IP"></a><strong>屏蔽IP</strong></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP       #屏蔽单个IP的命令</span><br><span class="line">iptables -I INPUT -s 123.0.0.0/8 -j DROP      #封整个段即从123.0.0.1到123.255.255.254的命令</span><br><span class="line">iptables -I INPUT -s 124.45.0.0/16 -j DROP    #封IP段即从123.45.0.1到123.45.255.254的命令</span><br><span class="line">iptables -I INPUT -s 123.45.6.0/24 -j DROP    #封IP段即从123.45.6.1到123.45.6.254的命令是</span><br></pre></td></tr></table></figure><h6 id="删除已添加的iptables规则"><a href="#删除已添加的iptables规则" class="headerlink" title="删除已添加的iptables规则"></a><strong>删除已添加的iptables规则</strong></h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将所有iptables以序号标记显示，执行：</span></span><br><span class="line">iptables -L -n --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment">#比如要删除INPUT里序号为8的规则，执行：</span></span><br><span class="line">iptables -D INPUT 8</span><br></pre></td></tr></table></figure><h2 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h2><h4 id="A类地址"><a href="#A类地址" class="headerlink" title="A类地址"></a><strong>A类地址</strong></h4><ul><li><p>1.0.0.1-126.155.255.254   </p><p>其中10.x.x.x 是私有地址，127.x.x.x 是保留地址，用作循环测试</p></li></ul><h4 id="B类IP地址"><a href="#B类IP地址" class="headerlink" title="B类IP地址"></a><strong>B类IP地址</strong></h4><ul><li>范围从128.0.0.0 到 191.255.255.255 可用的B类网络有16382个<br>172.16.0.0 ~ 172.31.255.255 是私有地址</li></ul><h4 id="C类IP地址"><a href="#C类IP地址" class="headerlink" title="C类IP地址"></a><strong>C类IP地址</strong></h4><ul><li>范围从192.0.0.0 到 223.225.255.254<br>192.168.x.x 是私有地址</li></ul><h2 id="特殊符号用法"><a href="#特殊符号用法" class="headerlink" title="特殊符号用法"></a>特殊符号用法</h2><h4 id="amp-amp-amp-amp-gt"><a href="#amp-amp-amp-amp-gt" class="headerlink" title="$?    $#   &amp;   &amp;&amp;   &amp;&gt;  |   ||  ;  ;;"></a>$?    $#   &amp;   &amp;&amp;   <strong>&amp;&gt;</strong>  |   ||  ;  ;;</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">|</span><br><span class="line">表示管道，上一条命令的输出，作为下一条命令参数，如：<span class="built_in">ls</span> | grep “aa”，在<span class="built_in">ls</span>的输出中查找aa字符串。</span><br><span class="line"></span><br><span class="line">||</span><br><span class="line">表示上一条命令执行失败后，才执行下一条命令，如 <span class="built_in">cat</span> nofile || <span class="built_in">echo</span> “fail”</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line">表示任务在后台执行，执行程序的后面添加&amp;，这样在程序执行时我们仍然可以操作控制台。如要在后台运行test.jar,则可以用  java -jar test.jar &gt; log.txt &amp;</span><br><span class="line"></span><br><span class="line">&amp;&amp;</span><br><span class="line">表示前一条命令执行成功时，才执行后一条命令 ，如 <span class="built_in">echo</span> <span class="string">&#x27;1‘ &amp;&amp; echo ‘2’</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$?和$#</span></span><br><span class="line"><span class="string">$?是执行上一条指令的返回值；$#是调用shell脚本传递的参数个数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&amp;&gt;</span></span><br><span class="line"><span class="string">可以将错误信息或者普通信息都重定向输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; 分号 </span></span><br><span class="line"><span class="string">在 shell 中，担任&quot;连续指令&quot;功能的符号就是&quot;分号&quot;。譬如以下的例子：cd ~/backup ; mkdir startup ;cp ~/.* startup/.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; 连续分号</span></span><br><span class="line"><span class="string">专用在 case 的选项，担任 Terminator 的角色。</span></span><br><span class="line"><span class="string">case &quot;$fop&quot; inhelp) echo &quot;Usage: Command -help -version filename&quot;;;version) echo &quot;version 0.1&quot; ;;esac</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[   ] 中括号</span></span><br><span class="line"><span class="string">常出现在流程控制中，扮演括住判断式的作用。if [ &quot;$?&quot; != 0 ]thenecho &quot;Executes error&quot;exit1fi</span></span><br><span class="line"><span class="string">这个符号在正则表达式中担任类似 &quot;范围&quot; 或 &quot;集合&quot; 的角色</span></span><br><span class="line"><span class="string">rm -r 200[1234]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[[     ]]</span></span><br><span class="line"><span class="string">这组符号与先前的 [] 符号，基本上作用相同，但她允许在其中直接使用 || 与&amp;&amp; 逻辑等符号。</span></span><br><span class="line"><span class="string">#!/bin/bashread akif [[ $ak &gt; 5 || $ak&lt; 9 ]]thenecho $akfi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">, 逗点 (comma，标点中的逗号)</span></span><br><span class="line"><span class="string">这个符号常运用在运算当中当做&quot;区隔&quot;用途。如下例</span></span><br><span class="line"><span class="string">#!/bin/bashlet &quot;t1 = ((a = 5 + 3, b = 7 - 1, c = 15 / 3))&quot;echo &quot;t1= $t1, a = $a, b = $b&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>string<span class="string">&#x27; 单引号 </span></span><br><span class="line"><span class="string">被单引号用括住的内容，将被视为单一字串。在引号内的代表变数的$符号，没有作用，也就是说，他被视为一般符号处理，防止任何变量替换。</span></span><br><span class="line"><span class="string">heyyou=homeecho &#x27;</span><span class="variable">$heyyou</span><span class="string">&#x27; # We get $heyyou</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;string&quot; 双引号 </span></span><br><span class="line"><span class="string">被双引号用括住的内容，将被视为单一字串。它防止通配符扩展，但允许变量扩展。这点与单引数的处理方式不同。</span></span><br><span class="line"><span class="string">heyyou=homeecho &quot;$heyyou&quot; # We get home</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">` 倒引号 </span></span><br><span class="line"><span class="string">在前面的单双引号，括住的是字串，但如果该字串是一列命令列，会怎样？答案是不会执行。要处理这种情况，我们得用倒单引号来做。</span></span><br><span class="line"><span class="string">fdv=`date +%F`echo &quot;Today $fdv&quot;</span></span><br><span class="line"><span class="string">在倒引号内的 date +%F 会被视为指令，执行的结果会带入 fdv 变数中。</span></span><br></pre></td></tr></table></figure><h2 id="linux标准输入输出"><a href="#linux标准输入输出" class="headerlink" title="linux标准输入输出"></a>linux标准输入输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">linux中有三种标准输入输出，分别是STDIN，STDOUT，STDERR，对应的数字是0，1，2。</span><br><span class="line"></span><br><span class="line">STDIN是标准输入，默认从键盘读取信息；</span><br><span class="line">STDOUT是标准输出，默认将输出结果输出至终端；</span><br><span class="line">STDERR是标准错误，默认将输出结果输出至终端。</span><br><span class="line"></span><br><span class="line">由于STDOUT与STDERR都会默认显示在终端上，为了区分，就有了编号的0，1，2的定义，用1表示STDOUT，2表示STDERR。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">2&gt;</span><span class="language-bash">&amp;1，指将标准输出、标准错误指定为同一输出路径</span></span><br><span class="line">若要将所有标准输出及标准错误都输出至文件，可用&amp;表示全部1和2的信息，eg：</span><br><span class="line">find /etc -name passwd &amp;&gt;find.all 或 find /etc -name passwd &gt;find.all 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><h4 id="快速ping多个网段"><a href="#快速ping多个网段" class="headerlink" title="快速ping多个网段"></a>快速ping多个网段</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap  -sn 101.36.178.0/24 101.36.172.0/24    快速ping多个网段，12个网段15秒结束</span><br></pre></td></tr></table></figure><h4 id="检测某个IP的端口开放了那些"><a href="#检测某个IP的端口开放了那些" class="headerlink" title="检测某个IP的端口开放了那些"></a>检测某个IP的端口开放了那些</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -Pn 22,80,3306,443, x.x.x.x</span><br></pre></td></tr></table></figure><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">xshell终端中</span><br><span class="line">ctrl w     <span class="comment">#删除上个单词</span></span><br><span class="line">ctrl ins   <span class="comment">#复制</span></span><br><span class="line"><span class="built_in">shift</span> ins   <span class="comment">#粘贴</span></span><br><span class="line">alt 1 2 3  <span class="comment">#快速切换终端</span></span><br><span class="line">yyp<span class="comment">#复制本行粘贴</span></span><br><span class="line">ctrl v     <span class="comment">#选中   y 复制   p粘贴</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ctrl c   <span class="comment">#复制</span></span><br><span class="line">ctrl v     <span class="comment">#粘贴</span></span><br><span class="line">ctrl a    全选</span><br><span class="line">ctrl pageup   <span class="comment">#上一个浏览器页面</span></span><br><span class="line">ctrl pagedown   <span class="comment">#下一个</span></span><br><span class="line">ctrl w <span class="comment">#关闭当前浏览器</span></span><br></pre></td></tr></table></figure><h2 id="查看当前开放的端口和进程"><a href="#查看当前开放的端口和进程" class="headerlink" title="查看当前开放的端口和进程"></a>查看当前开放的端口和进程</h2><h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ss -tuna </span><br><span class="line">netstat -utplna</span><br></pre></td></tr></table></figure><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ps -ef </span></span><br></pre></td></tr></table></figure><h4 id="查看进程的父进程"><a href="#查看进程的父进程" class="headerlink" title="查看进程的父进程"></a>查看进程的父进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install psmisc</span><br><span class="line">pstree -aps  异常进程ID号</span><br></pre></td></tr></table></figure><h2 id="lsblk磁盘管理用法"><a href="#lsblk磁盘管理用法" class="headerlink" title="lsblk磁盘管理用法"></a>lsblk磁盘管理用法</h2><h4 id="查看磁盘信息"><a href="#查看磁盘信息" class="headerlink" title="查看磁盘信息"></a>查看磁盘信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lsblk   </span><br><span class="line"><span class="comment">########查看磁盘信息</span></span><br><span class="line">[root@openvpn /]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0   50G  0 disk </span><br><span class="line">└─vda1 253:1    0   50G  0 part /</span><br><span class="line">vdb    253:16   0  100G  0 disk </span><br></pre></td></tr></table></figure><h4 id="将未挂载的vdb磁盘进行分区挂载"><a href="#将未挂载的vdb磁盘进行分区挂载" class="headerlink" title="将未挂载的vdb磁盘进行分区挂载"></a>将未挂载的vdb磁盘进行分区挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]<span class="comment"># fdisk /dev/vdb </span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line">First sector (2048-209715199, default 2048): 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-209715199, default 209715199): </span><br><span class="line">Using default value 209715199</span><br><span class="line">Partition 1 of <span class="built_in">type</span> Linux and of size 100 GiB is <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br></pre></td></tr></table></figure><h4 id="格式化磁盘挂载"><a href="#格式化磁盘挂载" class="headerlink" title="格式化磁盘挂载"></a>格式化磁盘挂载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#######格式化磁盘</span></span><br><span class="line">[root@openvpn ~]<span class="comment"># mkfs -t ext4 /dev/vdb1</span></span><br><span class="line">NAME   FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class="line">vda                                                      </span><br><span class="line">└─vda1 ext4         9f64194b-530f-4d17-bef9-d3607ecb5d55 /</span><br><span class="line">vdb                                                      </span><br><span class="line">└─vdb1 ext4         2ffae3ec-11d0-40d7-81fb-f078a4f082f6 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######临时挂载</span></span><br><span class="line">[root@openvpn ~]<span class="comment">#mount /dev/vdb1 /opt/</span></span><br><span class="line"></span><br><span class="line">[root@openvpn ~]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME   FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class="line">vda                                                      </span><br><span class="line">└─vda1 ext4         9f64194b-530f-4d17-bef9-d3607ecb5d55 /</span><br><span class="line">vdb                                                      </span><br><span class="line">└─vdb1 ext4         2ffae3ec-11d0-40d7-81fb-f078a4f082f6 /var</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blkid </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置永久挂载不失效</span></span><br><span class="line">[root@openvpn ~]<span class="comment"># vim /etc/fstab</span></span><br><span class="line">UUID=9f64194b-530f-4d17-bef9-d3607ecb5d55 /                       ext4    defaults        1 1</span><br><span class="line">UUID=2ffae3ec-11d0-40d7-81fb-f078a4f082f6 /var                    ext3    defaults        1 1</span><br><span class="line"></span><br><span class="line">[root@openvpn ~]<span class="comment">#mount -a</span></span><br></pre></td></tr></table></figure><h4 id="删除磁盘分区"><a href="#删除磁盘分区" class="headerlink" title="删除磁盘分区"></a>删除磁盘分区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn ~]<span class="comment"># lsblk -a</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda    253:0    0   50G  0 disk </span><br><span class="line">└─vda1 253:1    0   50G  0 part /</span><br><span class="line">vdb    253:16   0  100G  0 disk </span><br><span class="line">└─vdb1 253:17   0  512B  0 part </span><br><span class="line">[root@openvpn ~]<span class="comment"># fdisk /dev/vdb</span></span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, <span class="keyword">until</span> you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): d          <span class="comment">##d 为删除</span></span><br><span class="line">Selected partition 1<span class="comment">##输入要删除的分区号</span></span><br><span class="line">Partition 1 is deleted</span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w<span class="comment">## 保存并退出</span></span><br><span class="line">The partition table has been altered!</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><h2 id="服务器正在运行的用户"><a href="#服务器正在运行的用户" class="headerlink" title="服务器正在运行的用户"></a>服务器正在运行的用户</h2><h4 id="查看目前正在登录的用户"><a href="#查看目前正在登录的用户" class="headerlink" title="查看目前正在登录的用户"></a>查看目前正在登录的用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查看自己登录的终端信息</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># w |grep &#x27;w$&#x27;</span></span><br><span class="line"></span><br><span class="line">查看目前登录的用户IP</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># w |awk &#x27;NR&gt;=3 &#123;print $3&#125;&#x27;</span></span><br><span class="line">124.127.244.29</span><br><span class="line">124.127.244.29</span><br></pre></td></tr></table></figure><h4 id="查看自己登录身份"><a href="#查看自己登录身份" class="headerlink" title="查看自己登录身份"></a>查看自己登录身份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><h2 id="bond"><a href="#bond" class="headerlink" title="bond"></a>bond</h2><p>Bond技术即bonding，它是Linux Kernel的一个模块，能将多块物理网卡绑定到一块虚拟网卡上，并通过修改网口驱动让多块网卡看起来是一个单独的以太网接口设备（对外只有一个IP），一般用于解决网卡的单点故障或网卡负载较高的场景。</p><h4 id="Bond技术原理"><a href="#Bond技术原理" class="headerlink" title="Bond技术原理"></a><strong>Bond技术原理</strong></h4><p>Bond技术需要物理网卡开启混杂模式才能正常工作。在混杂模式下，网卡不只接收目的MAC地址为自身的以太网帧，而是接收网络上所有的数据帧。为了实现多块网卡的协同工作，Bond将自己的MAC地址复制到各个物理网卡上，让所有的网卡共享同一个MAC地址。这个方式就要求所有的网卡都要支持BIOS，这样才能够让操作系统将MAC地址写到网卡上。</p><p>对于单物理网卡的Bond网卡来说，Bond网卡的MAC地址和物理网卡的物理地址是一致的。而对于多物理网卡的Bond网卡而言，其中一块物理网卡会被设置为 Master，其他的网卡则都是Slave，Bond网卡的MAC地址取自标志为Master的物理网卡，然后再将这个MAC地址复制到其他物理网卡上。所以在安装网卡时，我们需要指定Bond网卡，以及Bond网卡所对应的标志为Master的物理网卡。</p><p>bond:可以理解为就是双网卡或者更多网卡绑定，逻辑上当作一个网卡用。</p><h4 id="网卡Bond模式"><a href="#网卡Bond模式" class="headerlink" title="网卡Bond模式"></a><strong>网卡Bond模式</strong></h4><p>网卡Bond模式总共有7种，最常用的是负载模式（模式0）和主备模式（模式1），在网络流量较大的场景下推荐使用负载模式，而在可靠性要求较高的场景下则推荐使用主备模式。接下来将对这7种模式进行简单的介绍以及优缺点对比。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1）mode=0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">介绍</span></span><br><span class="line">(balance-rr)Round-robin policy（平衡抡循环策略）</span><br><span class="line">        特点：传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕）</span><br><span class="line">        问题：一个连接的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发</span><br><span class="line"></span><br><span class="line">2）mode=1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">介绍</span></span><br><span class="line">bond1为主备模式，只有一个网卡在使用中。而且仅当活动网卡失效时才会激活其他的网卡。这种模式下做bond的两张或多张网卡的MAC地址和Bond虚拟网卡的MAC地址相同，而Bond的MAC地址是Bond创建启动后活动网卡的MAC地址这种模式要求主被网卡能快速的切换，即当主网卡出现故障后能迅速地切换至备用网卡。切换过程中，上层的应用几乎不受影响，因为Bond的驱动程序会临时接管上层应用的数据包，存放至数据缓冲区，等待备用网卡启动后再发送出去。但是如果切换时间过长，则会引起缓冲区的溢出，导致丢包</span><br><span class="line">        优点就是很安全，两块网卡同时坏的概率很低。</span><br><span class="line">        缺点则是利用率低下，只有50%的利用率。</span><br><span class="line"></span><br><span class="line">应用场景一般是服务器的管理口，管理口一般没有太高的网络需求，稳定第一</span><br><span class="line"></span><br><span class="line">mode=2</span><br><span class="line">平衡策略 balance-xor（XOR policy）</span><br><span class="line"></span><br><span class="line">基于特性的 Hash 算法传输数据包。</span><br><span class="line">缺省的策略为：(源MAC地址 XOR 目标MAC地址) % slave数量。 # XRO为异或运算，值不同时结果为1，相同为0</span><br><span class="line">可以通过xmit_hash_policy选项设置传输策略。</span><br><span class="line">       特点：提供负载均衡和容错能力。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3）mode=4</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">介绍</span>        </span><br><span class="line">       bond4为链路聚合模式。相当于两块小网卡合并一起当作一个大网卡用，类似1+1=2</span><br><span class="line">        前置条件1：交换机需要支持IEEE802.3ad(链路聚合标准)，并且在交换机上进行相应配置。</span><br><span class="line">        前置条件2：ethtool支持获取每个slave的速率和双工设定</span><br><span class="line"></span><br><span class="line">应用场景一般是业务网了，需要的大的带宽的情况比较适合</span><br></pre></td></tr></table></figure><h2 id="awk-常用语法"><a href="#awk-常用语法" class="headerlink" title="awk 常用语法"></a>awk 常用语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多个分隔符<span class="comment"># awk -F \: &#x27;&#123;print $1,$2&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ceph"><a href="#ceph" class="headerlink" title="ceph"></a>ceph</h2><h4 id="ceph-s-详解"><a href="#ceph-s-详解" class="headerlink" title="ceph -s 详解"></a>ceph -s 详解</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">watch -n1 ceph -s</span><br><span class="line"></span><br><span class="line">Every 5.0s: ceph -s                          Thu Aug 18 11:13:51 2022</span><br><span class="line"></span><br><span class="line">  cluster:</span><br><span class="line">    id:     dfff3f17-f0d8-4e8a-9107-a68fb4eccffa</span><br><span class="line">    health: HEALTH_WARN# 健康状态</span><br><span class="line">            9792109/98254284 objects misplaced (9.966%)</span><br><span class="line">            Degraded data redundancy: 19944/98254284 objects degraded</span><br><span class="line"> (0.020%), 105 pgs degraded, 187 pgs undersized</span><br><span class="line"></span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum controller1,controller2,controller3#三个守护进程，控制节点</span><br><span class="line">    mgr: mon1_mgr(active), standbys: mon3_mgr, mon2_mgr#活跃mon1_mgr备用mon3_mgrmon2_mgr</span><br><span class="line">    osd: 115 osds: 115 up, 115 in; 1125 remapped pgs</span><br><span class="line">    rgw: 6 daemons active</span><br><span class="line"></span><br><span class="line">  data:</span><br><span class="line">    pools:   11 pools, 5176 pgs</span><br><span class="line">    objects: 32.75 M objects, 102 TiB</span><br><span class="line">    usage:   352 TiB used, 513 TiB / 865 TiB avail</span><br><span class="line">    pgs:     19944/98254284 objects degraded (0.020%)</span><br><span class="line">             9792109/98254284 objects misplaced (9.966%)</span><br><span class="line">             4049 active+clean</span><br><span class="line">             813  active+remapped+backfill_wait</span><br><span class="line">             125  active+remapped+backfilling</span><br><span class="line">             104  active+recovery_wait+undersized+degraded+remapped</span><br><span class="line">             77   active+recovering+undersized+remapped</span><br><span class="line">             5    active+recovering+undersized</span><br><span class="line">             2    active+recovery_wait+remapped</span><br><span class="line">             1    active+recovery_wait+undersized+degraded</span><br><span class="line"></span><br><span class="line">  io:</span><br><span class="line">    client:   22 MiB/s rd, 200 MiB/s wr, 3.08 kop/s rd, 3.83 kop/s wr</span><br><span class="line">    recovery: 98 MiB/s, 26 objects/s</span><br></pre></td></tr></table></figure><h2 id="Grep"><a href="#Grep" class="headerlink" title="Grep"></a>Grep</h2><p>grep Mount -A 10</p><p>除了列出符合行之外，并且列出后NUM行</p><p>grep Mount -B 10</p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">history</span>(选项)(参数)</span></span><br><span class="line">选项:</span><br><span class="line">-N: 显示历史记录中最近的N个记录；</span><br><span class="line">-c：清空当前历史命令；</span><br><span class="line">-a：将历史命令缓冲区中命令写入历史命令文件中；</span><br><span class="line">-r：将历史命令文件中的命令读入当前历史命令缓冲区；</span><br><span class="line">-w：将当前历史命令缓冲区命令写入历史命令文件中;</span><br><span class="line">-d&lt;offset&gt;：删除历史记录中第offset个命令</span><br><span class="line">-n&lt;filename&gt;：读取指定文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">history</span> 10</span></span><br><span class="line"> 1061  telnet 122.14.196.40 19091</span><br><span class="line"> 1062  telnet 122.14.196.40 9091</span><br><span class="line"> 1063  ls</span><br><span class="line"> 1064  df -hT</span><br><span class="line"> 1065  history -n 20</span><br><span class="line"> 1066  history 20</span><br><span class="line"> 1067  telnet 122.14.196.40 19091</span><br><span class="line"> 1068  ls</span><br><span class="line"> 1069  df -hT</span><br><span class="line"> 1070  history 10</span><br><span class="line"></span><br><span class="line">使用  !number  执行第几条命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!1063</span></span><br><span class="line">ls</span><br><span class="line">1.txt  alertmanager.yml  prometheus_SD_.yml  prometheus.yml  rules  targets</span><br><span class="line"></span><br><span class="line">执行上一条命令</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用Ctrl+R搜索历史命令；当你执行了一串相当长的命令之后，你只要用关键字搜索一下历史命令然后重新执行这条命令而不需要将整条命令再输一遍</span><br></pre></td></tr></table></figure><h2 id="http-status-状态码-："><a href="#http-status-状态码-：" class="headerlink" title="http  status(状态码)："></a>http  status(状态码)：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1xx:100-101,信息提示：</span><br><span class="line">​2xx：200-206，成功类信息</span><br><span class="line">​3xx：300-305，重定向</span><br><span class="line">​4xx：400-415，错误类信息，客户端错误</span><br><span class="line">​5xx：500-505，错误类信息，服务器端错误</span><br><span class="line"></span><br><span class="line">常用的状态码：</span><br><span class="line">200：成功，请求的所有数据通过响应报文的entity-body部分发送：ok</span><br><span class="line">301：请求的URL指向的资源已经被删除，但在响应报文中通过首部Location指明了资源现在所处的新位置：Moved Permanently（永久删除）</span><br><span class="line">302：与301相似，但在响应报文中通过Location指明资源现在所处临时新位置；Found</span><br><span class="line">304：客户端发出了条件式请求；但服务器上的资源未曾发生改变，则通过响应此响应状态码通知客户端：Not Modified</span><br><span class="line">401：需要输入账号和面谬认证方能访问资源：Unauthorized</span><br><span class="line">403：请求被禁止：Firbidden</span><br><span class="line">404：服务器无法找到客户端请求的资源：Not Found</span><br><span class="line">500：服务器内部错误：Internal Server Error</span><br><span class="line">502：代理服务器从后端服务器收到了一条伪响应：Bad Gateway （很可能网关配置错误）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python pytest安装失败</title>
      <link href="/2022/05/12/pytest/"/>
      <url>/2022/05/12/pytest/</url>
      
        <content type="html"><![CDATA[<h2 id="python-pytest安装失败"><a href="#python-pytest安装失败" class="headerlink" title="python pytest安装失败"></a>python pytest安装失败</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><p>报错信息：</p><p>ERROR: Could not find a version that satisfies the requirement pytest<br>ERROR: No matching distribution found for pytest</p><p><img src="https://imglf5.lf127.net/img/b258ab8217c7b871/S1N2ZTNIeU5LNUhlelk0MTV4V1ZGbFYxcTFCejdJTFBkWFBHb3FFWVVDaz0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="报错详细信息"></p><p>解决办法：使用镜像安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><p>使用pip list查看一下，显示安装成功！</p><p><img src="https://imglf5.lf127.net/img/f46d94b9cb4048cb/S1N2ZTNIeU5LNUhlelk0MTV4V1ZGbjZ4eWZnTGhPYkhDeU1iaUVKZmlZST0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0"></p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见面试问题总结</title>
      <link href="/2022/04/27/mianshi/"/>
      <url>/2022/04/27/mianshi/</url>
      
        <content type="html"><![CDATA[<h4 id="怎么查看一个文件内容前十行-，怎么查看后十行：可以使用head（查看前几行）、tail（查看末尾几行）两个命令。"><a href="#怎么查看一个文件内容前十行-，怎么查看后十行：可以使用head（查看前几行）、tail（查看末尾几行）两个命令。" class="headerlink" title="怎么查看一个文件内容前十行 ，怎么查看后十行：可以使用head（查看前几行）、tail（查看末尾几行）两个命令。"></a>怎么查看一个文件内容前十行 ，怎么查看后十行：可以使用head（查看前几行）、tail（查看末尾几行）两个命令。</h4><p>例：<br>查看&#x2F;etc&#x2F;profile的前10行内容             # head -n 10 &#x2F;etc&#x2F;profile<br>查看&#x2F;etc&#x2F;profile的最后5行内容            # tail  -n 5 &#x2F;etc&#x2F;profile</p><p>如果想同时查看可以将前10行和后5行的显示信息通过输出重定向的方法保存到一个文档：<br>将内容输出到&#x2F;home&#x2F;test文件中</p><p>head -n 10 &#x2F;etc&#x2F;profile &gt;&gt;&#x2F;home&#x2F;test</p><p>tail  -n 5 &#x2F;etc&#x2F;profile&gt;&gt;&#x2F;home&#x2F;test</p><p>如何查看vi文件的前十行：  head vi 文件名   后十行 tail vi 文件名<br>查找一个字符串    grep “aaa”vi 文件名</p><h4 id="查看文本文件内容时，如果内容过少适合使用那个命令查看，内容过多适合使用那个命令"><a href="#查看文本文件内容时，如果内容过少适合使用那个命令查看，内容过多适合使用那个命令" class="headerlink" title="查看文本文件内容时，如果内容过少适合使用那个命令查看，内容过多适合使用那个命令"></a>查看文本文件内容时，如果内容过少适合使用那个命令查看，内容过多适合使用那个命令</h4><p>Cat：     会一次显示所有的内容，适合查看内容较少的文本文件<br>More：  命令可用于分屏显示文件内容，每次只显示一页内容</p><h4 id="在一个BDQN文件当中，想要查寻以-A为开头的行怎么查找，忽略大小写时加那个参数，怎么使用一条命令查找以A为开头的行数有多少"><a href="#在一个BDQN文件当中，想要查寻以-A为开头的行怎么查找，忽略大小写时加那个参数，怎么使用一条命令查找以A为开头的行数有多少" class="headerlink" title="在一个BDQN文件当中，想要查寻以  A为开头的行怎么查找，忽略大小写时加那个参数，怎么使用一条命令查找以A为开头的行数有多少"></a>在一个BDQN文件当中，想要查寻以  A为开头的行怎么查找，忽略大小写时加那个参数，怎么使用一条命令查找以A为开头的行数有多少</h4><p>[xusx@homeserver ~]$ grep ^A BDQN<br>[xusx@homeserver ~]$ grep ^A -i BDQN<br>[xusx@homeserver ~]$ grep ^A BDQN |wc -l</p><h4 id="如何给BDQN这个文件添加可读可写权限不可执行权限"><a href="#如何给BDQN这个文件添加可读可写权限不可执行权限" class="headerlink" title="如何给BDQN这个文件添加可读可写权限不可执行权限"></a>如何给BDQN这个文件添加可读可写权限不可执行权限</h4><p>chmod +rw BDQN</p><h4 id="写一条命令查找最后创建时间是3天前，后缀是-log的文件并删除"><a href="#写一条命令查找最后创建时间是3天前，后缀是-log的文件并删除" class="headerlink" title="写一条命令查找最后创建时间是3天前，后缀是*.log的文件并删除"></a>写一条命令查找最后创建时间是3天前，后缀是*.log的文件并删除</h4><p>find &#x2F; -mtime +3 -type f -name ‘*.log’ |xargs rm -f</p><h4 id="绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示-切换目录用什么命令？"><a href="#绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示-切换目录用什么命令？" class="headerlink" title="绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？"></a>绝对路径用什么符号表示？当前目录、上层目录用什么表示？主目录用什么表示? 切换目录用什么命令？</h4><p>绝对路径： 如&#x2F;etc&#x2F;init.d<br>当前目录和上层目录： .&#x2F;  ..&#x2F;<br>主目录： ~&#x2F;<br>切换目录： cd</p><h4 id="怎么查看当前进程？怎么执行退出？怎么查看当前路径？"><a href="#怎么查看当前进程？怎么执行退出？怎么查看当前路径？" class="headerlink" title="怎么查看当前进程？怎么执行退出？怎么查看当前路径？"></a>怎么查看当前进程？怎么执行退出？怎么查看当前路径？</h4><p>查看当前进程： ps<br>执行退出： exit<br>查看当前路径： pwd</p><h4 id="怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户-id？查看指定帮助用什么命令？"><a href="#怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户-id？查看指定帮助用什么命令？" class="headerlink" title="怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？"></a>怎么清屏？怎么退出当前命令？怎么执行睡眠？怎么查看当前用户 id？查看指定帮助用什么命令？</h4><p>清屏： clear<br>退出当前命令： ctrl+c 彻底退出<br>执行睡眠 ： ctrl+z 挂起当前进程fg 恢复后台<br>查看当前用户 id： ”id“：查看显示目前登陆账户的 uid 和 gid 及所属分组及用户名<br>查看指定帮助： 如 man adduser 这个很全 而且有例子； adduser –help 这个告诉你一些常用参数； info adduesr；</p><h4 id="Ls-命令执行什么功能？-可以带哪些参数，有什么区别？"><a href="#Ls-命令执行什么功能？-可以带哪些参数，有什么区别？" class="headerlink" title="Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？"></a>Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？</h4><p>ls 执行的功能： 列出指定目录中的目录，以及文件<br>哪些参数以及区别： a 所有文件l 详细信息，包括大小字节数，可读可写可执行的权限等</p><h4 id="如何建立软链接-快捷方式-，以及硬链接的命令。"><a href="#如何建立软链接-快捷方式-，以及硬链接的命令。" class="headerlink" title="如何建立软链接(快捷方式)，以及硬链接的命令。"></a>如何建立软链接(快捷方式)，以及硬链接的命令。</h4><p>软链接： ln -s slink source<br>硬链接： ln link source</p><h4 id="目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？"><a href="#目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？" class="headerlink" title="目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？"></a>目录创建用什么命令？创建文件用什么命令？复制文件用什么命令？</h4><p>创建目录： mkdir<br>创建文件：典型的如 touch，vi 也可以创建文件，其实只要向一个不存在的文件输出，都会创建文件<br>复制文件： cp 7. 文件权限修改用什么命令？格式是怎么样的？<br>文件权限修改： chmod</p><h4 id="查看文件内容有哪些命令可以使用？"><a href="#查看文件内容有哪些命令可以使用？" class="headerlink" title="查看文件内容有哪些命令可以使用？"></a>查看文件内容有哪些命令可以使用？</h4><p>vi 文件名 #编辑方式查看，可修改<br>cat 文件名 #显示全部文件内容<br>more 文件名 #分页显示文件内容<br>less 文件名 #与 more 相似，更好的是可以往前翻页<br>tail 文件名 #仅查看尾部，还可以指定行数<br>head 文件名 #仅查看头部,还可以指定行数</p><h4 id="随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello-world”"><a href="#随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello-world”" class="headerlink" title="随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?"></a>随意写文件命令？怎么向屏幕输出带空格的字符串，比如”hello world”?</h4><p>写文件命令：vi<br>向屏幕输出带空格的字符串:echo hello world</p><h4 id="如何查看系统内核的版本"><a href="#如何查看系统内核的版本" class="headerlink" title="如何查看系统内核的版本"></a>如何查看系统内核的版本</h4><p> uname -a<br> cat &#x2F;proc&#x2F;version</p><h4 id="如何查看磁盘还有多少剩余空间"><a href="#如何查看磁盘还有多少剩余空间" class="headerlink" title="如何查看磁盘还有多少剩余空间"></a>如何查看磁盘还有多少剩余空间</h4><p>这里主要可以用 df -ah 命令来查看，df 是用来查看文件系统磁盘空间使用情况的命令，<br>-a 显示所有文件系统，-h 用人们可读的方式进行显示。</p><h4 id="数据库的原理是什么"><a href="#数据库的原理是什么" class="headerlink" title="数据库的原理是什么"></a>数据库的原理是什么</h4><p>MySQL是一个单进程的服务，对于每一个请求都是用线程来响应的。需要一个连接器来处理新用户的请求、响应以及销毁。<br>1.客户端请求，服务端（连接器）开启线程响应用户<br>2.用户发起SQL语句查询数据库<br>3.查询缓存：记录用户的SQL查询语句。如果查询同样内容，就返回缓存。<br>4.如果缓存中没有对应的结果，则进入分析器。（分析器也可能借鉴缓存）</p><h4 id="你是怎么备份数据的，包括数据库备份？"><a href="#你是怎么备份数据的，包括数据库备份？" class="headerlink" title="你是怎么备份数据的，包括数据库备份？"></a>你是怎么备份数据的，包括数据库备份？</h4><p>回答：在生产环境下，不管是应用数据、还是数据库数据首先在部署的时候就会有主从架构，这本身就是是属于数据的热备份；<br>其实考虑冷备份，用专门一台服务器做为备份服务器，比如可以用rsync+inotify配合计划任务<br>来实现数据的冷备份，如果是发版的包备份，正常情况下有台发布服务器，每次发版都会保存好发版的包。</p><h4 id="详述MySQL主从复制原理"><a href="#详述MySQL主从复制原理" class="headerlink" title="详述MySQL主从复制原理"></a>详述MySQL主从复制原理</h4><p>主库开启binlog功能并授权从库连接主库，从库通过change master得到主库的相关同步信息,然后连接主库进行验证，<br>主库IO线程根据从库slave线程的请求，从master.info开始记录的位置点向下开始取信息，<br>同时把取到的位置点和最新的位置与binlog信息一同发给从库IO线程，从库将相关的sql语句存放在relay-log里面，<br>最终从库的sql线程将relay-log里的sql语句应用到从库上，至此整个同步过程完成，之后将是无限重复上述过程</p><h4 id="如果网络出现问题，如何进行排查"><a href="#如果网络出现问题，如何进行排查" class="headerlink" title="如果网络出现问题，如何进行排查"></a>如果网络出现问题，如何进行排查</h4><p>首先由外到内检查，先检查 网线&#x2F;网卡硬件设备，然后在使用ping命令一步一步排查 首先排查网关 之后排查dns 查看参数是否配置有误 </p><h4 id="如何配置网卡参数在linux系统中"><a href="#如何配置网卡参数在linux系统中" class="headerlink" title="如何配置网卡参数在linux系统中"></a>如何配置网卡参数在linux系统中</h4><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><h4 id="tcp五层协议你说一下："><a href="#tcp五层协议你说一下：" class="headerlink" title="tcp五层协议你说一下："></a>tcp五层协议你说一下：</h4><p>如果把各层都对应一个网络设备我想就很好理解了<br>应用层—-PC&#x2F;服务器（HTTP、HTTPS、FTP、SMTP….）<br>传输层—-防火墙(TCP、UDP)<br>网络层—-路由器（ARP、ICMP、IP、IGMP…）<br>数据链路层—-交换机（底层协议）<br>物理层—-网卡（底层协议）</p><h4 id="什么是封装和解封装？"><a href="#什么是封装和解封装？" class="headerlink" title="什么是封装和解封装？"></a>什么是封装和解封装？</h4><p>封装可理解为发送数据,解封装可以理解为接受数据的过程</p><h4 id="tcp和udp有哪些区别"><a href="#tcp和udp有哪些区别" class="headerlink" title="tcp和udp有哪些区别"></a>tcp和udp有哪些区别</h4><p>基于TCP的应用协议有：HTTP、FTP、SMTP、TELNET、SSH</p><p>基于UDP应用协议有：DNS、TFTP、SNMP、</p><p>1）安全方面的区别  </p><p>2）传播速度的区别：udp的传送速度比tcp快，因为tcp在传送的时候要先建立连接，建立连接的时候是比较耗时的，而且在传输数据的时候还要确认一些东西，而udp无连接传送数据</p><p>3）连接对象数量的区别：tcp是一对一的连接，而udp是一对多个或多个连接的</p><h4 id="简述TCP三次握手的过程？"><a href="#简述TCP三次握手的过程？" class="headerlink" title="简述TCP三次握手的过程？"></a>简述TCP三次握手的过程？</h4><p>在TCP&#x2F;IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。第一次握手：建立连接时，<br>客户端发送syn包(syn&#x3D;j)到服务器，并进入SYN_SEND状态，等待服务器确认。第二次握手：服务器收到syn包，<br>必须确认客户的SYN（ack&#x3D;j+1），同时自己也发送一个SYN包（syn&#x3D;k），即SYN+ACK包，<br>此时服务器进入SYN_RECV状态。第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack&#x3D;k+1)，<br>此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。完成三次握手，客户端与服务器开始传送数据简版：<br>首先A向B发SYN（同步请求），然后B回复SYN+ACK（同步请求应答），最后A回复ACK确认，这样TCP的一次连接（三次握手）的过程就建立了</p><h4 id="为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#为什么连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="为什么连接的时候是三次握手，关闭的时候却是四次握手？"></a>为什么连接的时候是三次握手，关闭的时候却是四次握手？</h4><p>这是因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，<br>SYN报文是用来同步的。但是关闭连接时，当Client端发送FIN报文仅仅表示它不再发送数据了但是还能接收数据，<br>Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。<br>只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手</p><h4 id="简述一下DNS的解析过程"><a href="#简述一下DNS的解析过程" class="headerlink" title="简述一下DNS的解析过程"></a>简述一下DNS的解析过程</h4><p>1、在浏览器中输入<a href="http://www.qq.com域名,操作系统会先检查自己本地的hosts文件是否有这个网址映射关系,/">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，</a><br>如果有，就先调用这个IP地址映射，完成域名解析。<br>2、如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。<br>3、如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP&#x2F;IP参数中设置的首选DNS服务器，<br>在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，<br>则返回解析结果给客户机，完成域名解析，此解析具有权威性。</p><h4 id="你有没有搭建过ftp，如何搭建的，做过哪些优化"><a href="#你有没有搭建过ftp，如何搭建的，做过哪些优化" class="headerlink" title="你有没有搭建过ftp，如何搭建的，做过哪些优化"></a>你有没有搭建过ftp，如何搭建的，做过哪些优化</h4><p>yum安装：首先设置yum仓或者把yum源改为阿里yum源   使用yum -y install命令安装vsftp  客服端安装lftp<br>本地安装 tar -zxvf解压 、zcvf压缩  创建目录 移动到目录 启动<br>编辑配置文件  vi &#x2F;etc&#x2F;vsfptd&#x2F;vsfptd.conf<br>max_clients&#x3D;10240 #最大连接数，不限制改为0       anon_max_rate&#x3D;50000 #限制匿名用户50KB</p><p>max_per_ip&#x3D;1000  #单IP最大连接数，不限制改为0    local_max_rate&#x3D;200000 #限制本地用户200K</p><h4 id="vpn有什么特点"><a href="#vpn有什么特点" class="headerlink" title="vpn有什么特点"></a>vpn有什么特点</h4><p>利用现有的公共ip网络，实现专线接入，采用隧道和加密技术，隐藏内部网络细节，成本低</p><h4 id="你说一下vlan的特点"><a href="#你说一下vlan的特点" class="headerlink" title="你说一下vlan的特点"></a>你说一下vlan的特点</h4><p>vlan（虚拟局域网）的主要特点就是安全，信息只到达应该到达的地点。防止了大部分基于网络监听的入侵手段。<br>通过虚拟网设置的访问控制，使在虚拟网外的网络节点不能直接访问虚拟网内节点。</p><h4 id="windows常见的磁盘分区方式"><a href="#windows常见的磁盘分区方式" class="headerlink" title="windows常见的磁盘分区方式"></a>windows常见的磁盘分区方式</h4><p>一主+一扩+扩中N个逻辑分区、2主+扩，逻辑分区</p><p>13.你都了解哪些网络命令和相对应的作用：<br>ping 网络连通性、  tracert 网络节点数、  telnet 远程连接、<br>nslookup 域名解析      ipconfig 网络链接的详细信息、<br>regedit 注册表、          ftp 登陆到ftp服务器</p><h4 id="简述raid0-raid1-raid5三种工作模式区别"><a href="#简述raid0-raid1-raid5三种工作模式区别" class="headerlink" title="简述raid0  raid1  raid5三种工作模式区别"></a>简述raid0  raid1  raid5三种工作模式区别</h4><p>RAID 0：连bai续以位或字节为单位分du割数据，并行读&#x2F;写于多个磁盘上zhi，因此具有很高的数据传输dao率，<br>但它没有数据冗余。RAID 0 不能应用于数据安全性要求高的场合。</p><p>RAID 1：镜象结构，类似于备份模式，一个数据被复制到两块硬盘上。</p><p>RAID5：分布式奇偶校验的独立磁盘结构，它的奇偶校验码存在于所有磁盘上，任何一个硬盘损坏，<br>都可以根据其它硬盘上的校验位来重建损坏的数据。支持一块盘掉线后仍然正常运行</p><h4 id="Linux系统开机模式："><a href="#Linux系统开机模式：" class="headerlink" title="Linux系统开机模式："></a>Linux系统开机模式：</h4><p>1.开机自检，加载BIOS   2.读取内存   3.引导菜单   4.加载l内核  5.init进程依据inittab文件夹来设定运行级别 6.执行不同运行级别的脚本程序</p><h4 id="Linux里如何来做挂载"><a href="#Linux里如何来做挂载" class="headerlink" title="Linux里如何来做挂载"></a>Linux里如何来做挂载</h4><p>只输入 mount命令可以查看所有系统已经挂载的文件。<br>如果想挂载一个新的文件，比如将 &#x2F;dev&#x2F;hda1 挂在 &#x2F;mnt 之下，可以用mount &#x2F;dev&#x2F;hda1 &#x2F;mnt</p><h4 id="终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？"><a href="#终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？" class="headerlink" title="终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？"></a>终端是哪个文件夹下的哪个文件？黑洞文件是哪个文件夹下的哪个命令？</h4><p>终端  &#x2F;dev&#x2F;tty<br>黑洞文件  &#x2F;dev&#x2F;null</p><h4 id="删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？"><a href="#删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？" class="headerlink" title="删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？"></a>删除文件用哪个命令？如果需要连目录及目录下文件一块删除呢？删除空文件夹用什么命令？</h4><p>rm rm -r rmdir</p><h4 id="如何编写新建10个用户的脚本，用户名前缀为yu，后面的名字是从1到10，例如：yu1-到yu10"><a href="#如何编写新建10个用户的脚本，用户名前缀为yu，后面的名字是从1到10，例如：yu1-到yu10" class="headerlink" title="如何编写新建10个用户的脚本，用户名前缀为yu，后面的名字是从1到10，例如：yu1 到yu10"></a>如何编写新建10个用户的脚本，用户名前缀为yu，后面的名字是从1到10，例如：yu1 到yu10</h4><p>所有用户的密码都是123123</p><p>#!&#x2F;bin&#x2F;bash<br>for   i  in {1..10}<br>do<br>        useradd  yu$i<br>        echo  123123 | passwd yu$i –stdin<br>done</p><h4 id="Linux-下命令有哪几种可使用的通配符？分别代表什么含义"><a href="#Linux-下命令有哪几种可使用的通配符？分别代表什么含义" class="headerlink" title="Linux 下命令有哪几种可使用的通配符？分别代表什么含义?"></a>Linux 下命令有哪几种可使用的通配符？分别代表什么含义?</h4><p>答案：<br>“？”可替代单个字符。<br>“*”可替代任意多个字符。<br>方括号“[charset]”可替代 charset 集中的任何单个字符，如[a-z]，[abABC]</p><h4 id="终止进程用什么命令-带什么参数"><a href="#终止进程用什么命令-带什么参数" class="headerlink" title="终止进程用什么命令? 带什么参数?"></a>终止进程用什么命令? 带什么参数?</h4><p>kill [-s &lt;信息名称或编号&gt;][程序] 或 kill [-l &lt;信息编号&gt;]<br>kill-9 pid</p><h4 id="搜索文件用什么命令-格式是怎么样的"><a href="#搜索文件用什么命令-格式是怎么样的" class="headerlink" title="搜索文件用什么命令? 格式是怎么样的?"></a>搜索文件用什么命令? 格式是怎么样的?</h4><p>find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;<br>whereis 加参数与文件名<br>locate 只加文件名<br>find 直接搜索磁盘，较慢。<br>find &#x2F; -name “string*”</p><h4 id="使用什么命令查看用过的命令列表"><a href="#使用什么命令查看用过的命令列表" class="headerlink" title="使用什么命令查看用过的命令列表?"></a>使用什么命令查看用过的命令列表?</h4><p>history</p><h4 id="使用什么命令查看磁盘使用空间？-空闲空间呢"><a href="#使用什么命令查看磁盘使用空间？-空闲空间呢" class="headerlink" title="使用什么命令查看磁盘使用空间？ 空闲空间呢?"></a>使用什么命令查看磁盘使用空间？ 空闲空间呢?</h4><p>答案：<br>df -hl<br>文件系统 容量 已用 可用 已用% 挂载点<br>Filesystem Size Used Avail Use% Mounted on &#x2F;dev&#x2F;hda2 45G 19G 24G 44% &#x2F;<br>&#x2F;dev&#x2F;hda1 494M 19M 450M 4% &#x2F;boot</p><h4 id="说一下Tomcat工作模式？"><a href="#说一下Tomcat工作模式？" class="headerlink" title="说一下Tomcat工作模式？"></a>说一下Tomcat工作模式？</h4><p>Tomcat是一个JSP&#x2F;Servlet容器。其作为Servlet容器，有三种工作模式：独立的Servlet容器、进程内的Servlet容器和进程外的Servlet容器。<br>进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：<br>Tomcat作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；<br>Tomcat作为独立服务器：请求来自于web浏览器；</p><h4 id="监控用什么实现的？"><a href="#监控用什么实现的？" class="headerlink" title="监控用什么实现的？"></a>监控用什么实现的？</h4><p>回答：现在公司的业务都跑在阿里云上，我们首选的监控就是用阿里云监控，阿里云监控自带了ECS、RDS等服务的监控模板，<br>可结合自定义报警规则来触发监控项。上家公司的业务是托管在IDC，用的是zabbix监控方案，zabbix图形界面丰富，<br>也自带很多监控模板，特别是多个分区、多个网卡等自动发现并进行监控做得非常不错，不过需要在每台客户机（被监控端）安装zabbix agent。</p><h4 id="docker的三种工作网络模式"><a href="#docker的三种工作网络模式" class="headerlink" title="docker的三种工作网络模式"></a>docker的三种工作网络模式</h4><p><strong>bridge 桥接模式</strong></p><p>桥接模式是docker 的默认网络设置，当Docker服务启动时，会在主机上创建一个名为docker0的虚拟<a href="https://so.csdn.net/so/search?q=%E7%BD%91%E6%A1%A5&spm=1001.2101.3001.7020">网桥</a>，并选择一个和宿主机不同的IP地址和子网分配给docker0网桥</p><p><strong>host 模式</strong></p><p>该模式下容器是不会拥有自己的ip地址，而是使用宿主机的ip地址和端口。这种模式的好处就是网络性能比桥接模式的好。缺点就是会占用宿主机的端口，网络的隔离性不太好</p><p><strong>none 模式</strong></p><p>加上后面的参数就行了 –net&#x3D;none</p><p>none模式没有IP地址，无法连接外网，等于就是断网的状态，作用就是用于测试，生产环境一般不会用到这种</p><h4 id="描述一下jenkins发包流程"><a href="#描述一下jenkins发包流程" class="headerlink" title="描述一下jenkins发包流程"></a>描述一下jenkins发包流程</h4><ol><li>开发者开发代码</li><li>提交至git仓库</li><li>jenkins从仓库拉取代码</li><li>jenkins通过maven（ant，gradle等）构建项目推到docker仓库</li><li>生成一个在tomcat运行的项目的docker容器</li><li>测试人员测试</li></ol><p><a href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020">Jenkins</a>是一个开源的、可扩展的持续集成、交付、部署（软件&#x2F;代码的编译、打包、部署）的基于web界面的平台。允许持续集成和持续交付项目，无论用的是什么平台，可以处理任何类型的构建或持续集成</p><h4 id="CI-x2F-CD"><a href="#CI-x2F-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h4><p><strong>CI&#x2F;CD 是一种通过在应用开发阶段引入<a href="https://www.redhat.com/zh/topics/automation/whats-it-automation">自动化</a>来频繁向客户交付应用的方法。CI&#x2F;CD 的核心概念是持续集成、<a href="https://www.redhat.com/zh/topics/devops/what-is-continuous-delivery">持续交付</a>和持续部署</strong></p><p>持续集成（Continuous integration，简称CI）指的是频繁地（一天多次）将代码集成到主干。它属于开发人员的自动化流程。成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享存储库中<br>持续集成的目的就是让产品可以快速迭代，同时还能保证高质量，它的核心措施是将代码集成到主干之间，必须通过<a href="https://so.csdn.net/so/search?q=%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">自动化测试</a>，只要有一个测试用例失败，就不能集成</p><p><strong>“CD”指的是持续交付和&#x2F;或持续部署，这些相关概念有时会交叉使用。两者都事关管道后续阶段的自动化，但它们有时也会单独使用，用于说明自动化程度。</strong></p><p>持续<em>交付</em>通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 <a href="https://redhatofficial.github.io/#!/main">GitHub</a> 或容器注册表），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p><p>持续<em>部署</em>（另一种”CD”）指的是自动将开发人员的更改从存储库发布到生产环境，以供客户使用。它主要为了解决因手动流程降低应用交付速度，从而使运维团队超负荷的问题。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化</p><h4 id="描述下微服务架构"><a href="#描述下微服务架构" class="headerlink" title="描述下微服务架构"></a>描述下微服务架构</h4><p><strong>优点：</strong><br>首先，微服务易于开发和维护，因为一个服务只关注一个特定的业务功能，业务清晰，代码量少，同时技术栈不受限制，比如有些服务可以使用redis，有些服务使用mysql，部分服务使用JAVA开发，部分微服务使用Node.js开发，微服务代码独立，数据独立，如果修改应用，可以对单服务进行修改再部署，并且可根据需求，对各个微服务进行突破瓶颈，比如升级CPU，增加内存等<br><strong>缺点：</strong><br>分布式事务的问题<br>提升了运维难度（发版、问题排查、配置管理、监控) –&gt;催生了Jenkins + ELK +Spring Config + Spring Admin + Docker<br>性能降低，网络延迟，接口调整成本高，微服务之间通过接口进行通信</p><h4 id="说一下kubernetes"><a href="#说一下kubernetes" class="headerlink" title="说一下kubernetes"></a>说一下kubernetes</h4><p>实现容器集群的自动化部署、自动扩缩容、维护等功能。它既是一款容器编排工具，也是全新的基于容器技术的分布式架构领先方案。在Docker技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等功能，提高了大规模容器集群管理的便捷性。</p><p>Kubernetes集群包含所有节点代理kubelet和Master组件（APIs、scheduler、etc），一切都基于分布式的存储系统.</p><p><strong>Master</strong>为管理节点主要负责K8S集群管理，集群中各节点间的信息交互、任务调度，还负责容器、Pod、NameSpaces、PV等生命周期的管理。</p><p><strong>Node</strong> 节点是真正运行应用容器的工作节点，在每个 Node 节点上都会运行一个 Kubelet 代理，控制该节点上的容器、镜像和存储卷等。</p><p>Kubernetes主要由以下几个核心组件组成：</p><p>etcd：保存了整个集群的状态；<br>apiserver：提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；<br>controller manager：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；<br>scheduler：负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；<br>kubelet：负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理；<br>Container runtime：负责镜像管理以及Pod和容器的真正运行（CRI）；<br>kube-proxy：负责为Service提供cluster内部的服务发现和负载均衡，负责将访问到某个服务的请求具体分配给工作节点上的 Pod。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试工程师必备MySQL命令</title>
      <link href="/2022/04/24/mysql/"/>
      <url>/2022/04/24/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="测试工程师必备MySQL命令"><a href="#测试工程师必备MySQL命令" class="headerlink" title="测试工程师必备MySQL命令"></a>测试工程师必备MySQL命令</h1><h2 id="数据定义语言（DDL）"><a href="#数据定义语言（DDL）" class="headerlink" title="数据定义语言（DDL）"></a>数据定义语言（DDL）</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li>登录数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h(主机地址) <span class="operator">-</span>P(端口) <span class="operator">-</span>u(用户名) <span class="operator">-</span>p(密码)</span><br><span class="line">mysql <span class="operator">-</span>h192<span class="number">.168</span><span class="number">.1</span><span class="number">.203</span> <span class="operator">-</span>P3307 <span class="operator">-</span>uroot <span class="operator">-</span>pmysql</span><br></pre></td></tr></table></figure><ul><li>创建数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test;</span><br></pre></td></tr></table></figure><ul><li>查看数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><ul><li>切换数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br></pre></td></tr></table></figure><ul><li>查看所有数据表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><ul><li>删除数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database test;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><ul><li>创建表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">ename <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">hiredate <span class="type">date</span>,</span><br><span class="line">sal <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">deptno <span class="type">int</span>(<span class="number">2</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    deptno <span class="type">int</span>(<span class="number">2</span>),</span><br><span class="line">    deptname <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>查看表结构：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> emp;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> emp \G # 详细</span><br></pre></td></tr></table></figure><ul><li>删除表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp;</span><br></pre></td></tr></table></figure><ul><li>修改表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp modify ename <span class="type">varchar</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><ul><li>添加表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">column</span> age <span class="type">int</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>删除表字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">column</span> age;</span><br></pre></td></tr></table></figure><ul><li>字段改名：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp change age age1 <span class="type">int</span>(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><ul><li>修改表名：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp rename emp1;</span><br></pre></td></tr></table></figure><h2 id="数据操纵语句-DML"><a href="#数据操纵语句-DML" class="headerlink" title="数据操纵语句(DML)"></a>数据操纵语句(DML)</h2><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><ul><li>指定字段插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (ename,hiredate,sal,deptno) <span class="keyword">values</span> (<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;2022-0-03&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>不指定字段插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;2022-03-03&#x27;</span>,<span class="string">&#x27;2000&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>批量插入：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;dept1&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;dept2&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录:"></a>修改记录:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal<span class="operator">=</span><span class="string">&#x27;4000&#x27;</span>,deptno<span class="operator">=</span><span class="number">2</span> <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除记录："><a href="#删除记录：" class="headerlink" title="删除记录："></a>删除记录：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="查询记录："><a href="#查询记录：" class="headerlink" title="查询记录："></a>查询记录：</h3><ul><li>查询整张表所有字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><ul><li>查询不重复的字段：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><ul><li>条件查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sal<span class="operator">&lt;</span><span class="number">3000</span>;</span><br></pre></td></tr></table></figure><ul><li>排序和限制：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span> limit <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>分页查询(查询从第0条记录开始10条)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> deptno <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>聚合(查询部门人数大于1的部门编号)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno <span class="keyword">having</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>连接查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno<span class="operator">=</span>d.deptno;</span><br></pre></td></tr></table></figure><ul><li>子查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</span><br></pre></td></tr></table></figure><ul><li>多表联合查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp <span class="keyword">union</span> <span class="keyword">select</span> deptno <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><h2 id="数据控制语句-DCL"><a href="#数据控制语句-DCL" class="headerlink" title="数据控制语句(DCL)"></a>数据控制语句(DCL)</h2><h3 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h3><ul><li>授予操作权限(将test数据库中所有表的select和insert权限授予test用户)：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span> <span class="keyword">on</span> test.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>查看账户权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>收回操作权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">insert</span> <span class="keyword">on</span> test.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>授予所有数据库的所有权限（包括grant）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br></pre></td></tr></table></figure><ul><li>授予SUPER PROCESS FILE权限（系统权限不能指定数据库）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> super,process,file <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>只授予登录权限：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> usage <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="账号相关"><a href="#账号相关" class="headerlink" title="账号相关"></a>账号相关</h3><ul><li>删除账号：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改自己的密码：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="operator">=</span> password(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>管理员修改他人密码：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> password <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> password(<span class="string">&#x27;123&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="字符集相关"><a href="#字符集相关" class="headerlink" title="字符集相关"></a>字符集相关</h3><ul><li>查看字符集：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character%&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>创建数据库时指定字符集：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test2 <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h3 id="时区相关"><a href="#时区相关" class="headerlink" title="时区相关"></a>时区相关</h3><ul><li>查看当前时区（UTC为世界统一时间，中国为UTC+8）：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> &quot;%time_zone%&quot;;</span><br></pre></td></tr></table></figure><ul><li>修改mysql全局时区为北京时间，即我们所在的东8区：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改当前会话时区：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+8:00&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>立即生效：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议</title>
      <link href="/2022/03/29/http%E5%8D%8F%E8%AE%AE/"/>
      <url>/2022/03/29/http%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫入门系列（一）：快速理解HTTP协议"><a href="#爬虫入门系列（一）：快速理解HTTP协议" class="headerlink" title="爬虫入门系列（一）：快速理解HTTP协议"></a>爬虫入门系列（一）：快速理解HTTP协议</h1><p>爬虫的基本原理是模拟浏览器进行 HTTP 请求，理解 HTTP 协议是写爬虫的必备基础，招聘网站的爬虫岗位也赫然写着熟练掌握HTTP协议规范，写爬虫还不得不先从HTTP协议开始讲起</p><h2 id="HTTP协议是什么？"><a href="#HTTP协议是什么？" class="headerlink" title="HTTP协议是什么？"></a>HTTP协议是什么？</h2><p>你浏览的每一个网页都是基于 HTTP 协议呈现的，HTTP 协议是互联网应用中，客户端（浏览器）与服务器之间进行数据通信的一种协议。协议中规定了客户端应该按照什么格式给服务器发送请求，同时也约定了服务端返回的响应结果应该是什么格式。</p><p>只要大家都按照协议规定方式发起请求和返回响应结果，任何人都可以基于HTTP协议实现自己的Web客户端（浏览器、爬虫）和Web服务器（Nginx、Apache等）。</p><p>HTTP 协议本身是非常简单的。它规定，只能由客户端主动发起请求，服务器接收请求处理后返回响应结果，同时 HTTP 是一种无状态的协议，协议本身不记录客户端的历史请求记录。</p><p><img src="https://imglf6.lf127.net/img/f86b0cc4589cbd58/S1N2ZTNIeU5LNUZxdFB2SHdJYWpzTVdEKzV6K0FOZWVMNnpDNFpPMlp5dz0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p><p>HTTP 协议是如何规定请求格式和响应格式的呢？换言之，客户端按照什么格式才能正确发起 HTTP 请求呢？服务端按照什么格式返回响应结果客户端才能正确解析？</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>HTTP 请求由4部分组成，分别是请求行、请求首部、空白行、请求体，首部和请求体是可选的，并不是每个请求都需要的。</p><p><img src="https://imglf4.lf127.net/img/5d3256f6e86b5d13/S1N2ZTNIeU5LNUZxdFB2SHdJYWpzTnhMa1BWdENoZllBRWxibHpMazRnQT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行是每个请求必不可少的部分，它由3部分组成，分别是请求方法（method)、请求URL（URI）、HTTP协议版本，以空格隔开。</p><p>HTTP协议中最常用的请求方法有：GET、POST、PUT、DELETE。GET 方法用于从服务器获取资源，90%的爬虫都是基于GET请求抓取数据。</p><p>请求 URL 是指资源所在服务器的路径地址，比如上图的例子表示客户端想获取 index.html 这个资源，它的路径在服务器 foofish.net 的根目录（&#x2F;）下面。</p><h3 id="请求首部"><a href="#请求首部" class="headerlink" title="请求首部"></a>请求首部</h3><p>因为请求行所携带的信息量非常有限，以至于客户端还有很多想向服务器要说的事情不得不放在请求首部（Header），请求首部用于给服务器提供一些额外的信息，比如 User-Agent 用来表明客户端的身份，让服务器知道你是来自浏览器的请求还是爬虫，是来自 Chrome 浏览器还是 FireFox。HTTP&#x2F;1.1 规定了47种首部字段类型。HTTP首部字段的格式很像 Python 中的字典类型，由键值对组成，中间用冒号隔开。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: Mozilla/<span class="number">5.0</span></span><br></pre></td></tr></table></figure><p>因为客户端发送请求时，发送的数据（报文）是由字符串构成的，为了区分请求首部的结尾和请求体的开始，用一个空行来表示，遇到空行时，就表示这是首部的结尾，请求体的开始。</p><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><p>请求体是客户端提交给服务器的真正内容，比如用户登录时的需要用的用户名和密码，比如文件上传的数据，比如注册用户信息时提交的表单信息。</p><p>现在我们用 Python 提供的最原始API <em>socket</em> 模块来模拟向服务器发起一个 HTTP 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">    <span class="comment"># 1. 与服务器建立连接</span></span><br><span class="line">    s.connect((<span class="string">&quot;www.seriot.ch&quot;</span>, <span class="number">80</span>))</span><br><span class="line">    <span class="comment"># 2. 构建请求行，请求资源是 index.php</span></span><br><span class="line">    request_line = <span class="string">b&quot;GET /index.php HTTP/1.1&quot;</span></span><br><span class="line">    <span class="comment"># 3. 构建请求首部，指定主机名</span></span><br><span class="line">    headers = <span class="string">b&quot;Host: seriot.ch&quot;</span></span><br><span class="line">    <span class="comment"># 4. 用空行标记请求首部的结束位置</span></span><br><span class="line">    blank_line = <span class="string">b&quot;\r\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求行、首部、空行这3部分内容用换行符分隔，组成一个请求报文字符串</span></span><br><span class="line">    <span class="comment"># 发送给服务器</span></span><br><span class="line">    message = <span class="string">b&quot;\r\n&quot;</span>.join([request_line, headers, blank_line])</span><br><span class="line">    s.send(message)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 服务器返回的响应内容稍后进行分析</span></span><br><span class="line">    response = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>服务端接收请求并处理后，返回响应内容给客户端，同样地，响应内容也必须遵循固定的格式浏览器才能正确解析。HTTP 响应也由4部分组成，分别是：响应行、响应首部、空白行、响应体，与 HTTP 的请求格式是相对应的。</p><p><img src="https://imglf6.lf127.net/img/1964a6d4326a3ae8/S1N2ZTNIeU5LNUZxdFB2SHdJYWpzRWFzcWw0VVFXdGRDYStlZ3BBS0RXQT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>响应行同样也是3部分组成，由服务端支持的 HTTP 协议版本号、状态码、以及对状态码的简短原因描述组成。</p><p>状态码是响应行中很重要的一个字段。通过状态码，客户端可以知道服务器是否正常处理的请求。如果状态码是200，说明客户端的请求处理成功，如果是500，说明服务器处理请求的时候出现了异常。404 表示请求的资源在服务器找不到。除此之外，HTTP 协议还很定义了很多其他的状态码，不过它不是本文的讨论范围。</p><h3 id="响应首部"><a href="#响应首部" class="headerlink" title="响应首部"></a>响应首部</h3><p>响应首部和请求首部类似，用于对响应内容的补充，在首部里面可以告知客户端响应体的数据类型是什么？响应内容返回的时间是什么时候，响应体是否压缩了，响应体最后一次修改的时间。</p><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>响应体（body）是服务器返回的真正内容，它可以是一个HTML页面，或者是一张图片、一段视频等等。</p><p>我们继续沿用前面那个例子来看看服务器返回的响应结果是什么？因为我只接收了前1024个字节，所以有一部分响应内容是看不到的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;HTTP/1.1 200 OK\r\n</span><br><span class="line">Date: Tue, 04 Apr 2022 16:22:35 GMT\r\n</span><br><span class="line">Server: Apache\r\n</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT\r\n</span><br><span class="line">Set-Cookie: PHPSESSID=66bea0a1f7cb572584745f9ce6984b7e; path=/\r\n</span><br><span class="line">Transfer-Encoding: chunked\r\n</span><br><span class="line">Content-Type: text/html; charset=UTF-8\r\n\r\n118d\r\n</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;</span>&gt;</span>\n\n</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xml:lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>\n</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>\n\t</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=iso-8859-1&quot;</span> /&gt;</span>    \n\t</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en&quot;</span> /&gt;</span>\n\t</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从结果来看，它与协议中规范的格式是一样的，第一行是响应行，状态码是200，表明请求成功。第二部分是响应首部信息，由多个首部组成，有服务器返回响应的时间，Cookie信息等等。第三部分就是真正的响应体 HTML 文本。</p><p>摘抄，原文出自：<a href="https://foofish.net/understand-http.html">爬虫入门系列（一）：快速理解HTTP协议</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium截图</title>
      <link href="/2022/03/27/Selenium%E6%88%AA%E5%9B%BE/"/>
      <url>/2022/03/27/Selenium%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p> 正常流程，打开浏览器跳转到百度<br> 导入 Pillow 的 Image ：pip install Pillow<br>from PIL import Image<br> 导入浏览器驱动<br>from selenium import webdriver</p><p> 创建一个驱动<br>driver &#x3D; webdriver.Chrome()<br> 打开url,跳转到指定页面<br>driver.get(“<a href="https://www.baidu.com/">https://www.baidu.com</a>“)<br> 截取当前屏幕大图，另存为指定路径的文件<br> 对当前屏幕进行截图，并保存为指定路径文件<br>driver.get_screenshot_as_file(r’图片存放的路径.png’)<br> 定位元素，获取 Xpath，ID 或 CSS 路径<br> 获取定位元素的位置、宽高参数<br> 定位需要打印的元素<br>pic_ele &#x3D; self.driver.find_element_by_xpath(‘&#x2F;&#x2F;*[@id&#x3D;”s_lg_img”]’)<br> 元素位置、宽高参数获取<br>left &#x3D; pic_ele.location.get(‘x’)<br>top &#x3D; pic_ele.location.get(‘y’)<br>right &#x3D; pic_ele.size.get(‘width’) + left<br>bottom &#x3D; pic_ele.size.get(‘height’) + top<br> 读取刚刚截取的大图文件，进行裁剪后保存<br> 读取图片<br>img &#x3D; Image.open(r’D:\screen_big.png’)<br> 根据元素的 Location和size 图片裁剪<br>pic_ele &#x3D; img.crop((left, top, right, bottom))<br> 保存裁剪好的文件图片<br>pic_ele.save(r’D:\screen_small.png’)<br> 退出浏览器<br>self.driver.quit()</p>]]></content>
      
      
      <categories>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置清单</title>
      <link href="/2022/03/23/nginx/"/>
      <url>/2022/03/23/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx配置清单"><a href="#Nginx配置清单" class="headerlink" title="Nginx配置清单"></a>Nginx配置清单</h2><p>Nginx 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP&#x2F;POP3&#x2F;SMTP 服务，其因丰富的功能集、稳定性、示例配置文件和低系统资源的消耗受到了开发者的欢迎。</p><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Standard HTTP Protocol</span>  </span><br><span class="line">listen 80;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Standard HTTPS Protocol</span>  </span><br><span class="line">listen 443 ssl;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For http2</span>  </span><br><span class="line">listen 443 ssl http2;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen on 80 using IPv6</span>  </span><br><span class="line">listen [::]:80;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen only on using IPv6</span>  </span><br><span class="line">listen [::]:80 ipv6only=on;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Relative or full path to <span class="built_in">log</span> file</span>  </span><br><span class="line">access_log /path/to/file.log;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Turn <span class="string">&#x27;on&#x27;</span> or <span class="string">&#x27;off&#x27;</span></span>    </span><br><span class="line">access_log on;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen to yourdomain.com</span>  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen to multiple domains server_name yourdomain.com www.yourdomain.com;</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen to all domains</span>  </span><br><span class="line">server_name *.yourdomain.com;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen to all top-level domains</span>  </span><br><span class="line">server_name yourdomain.*;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Listen to unspecified Hostnames (Listens to IP address itself)</span>  </span><br><span class="line">server_name &quot;&quot;;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line">location / &#123;  </span><br><span class="line">root /path/to/website;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name www.yourdomain.com;  </span><br><span class="line">return 301 http://yourdomain.com$request_uri;  </span><br><span class="line">&#125;  </span><br><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name www.yourdomain.com;  </span><br><span class="line">location /redirect-url &#123;  </span><br><span class="line">return 301 http://otherdomain.com;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line">location / &#123;  </span><br><span class="line">proxy_pass http://0.0.0.0:3000;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">where</span> 0.0.0.0:3000 is your application server (Ex: node.js) bound on 0.0.0.0 listening on port 3000</span>  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream node_js &#123;  </span><br><span class="line">server 0.0.0.0:3000;  </span><br><span class="line">server 0.0.0.0:4000;  </span><br><span class="line">server 123.131.121.122;  </span><br><span class="line">&#125;  </span><br><span class="line">server &#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line">location / &#123;  </span><br><span class="line">proxy_pass http://node_js;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="SSL协议"><a href="#SSL协议" class="headerlink" title="SSL协议"></a>SSL协议</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">listen 443 ssl;  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line">ssl on;  </span><br><span class="line">ssl_certificate /path/to/cert.pem;  </span><br><span class="line">ssl_certificate_key /path/to/privatekey.pem;  </span><br><span class="line">ssl_stapling on;  </span><br><span class="line">ssl_stapling_verify on;  </span><br><span class="line">ssl_trusted_certificate /path/to/fullchain.pem;  </span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  </span><br><span class="line">ssl_session_timeout 1h;  </span><br><span class="line">ssl_session_cache shared:SSL:50m;  </span><br><span class="line">add_header Strict-Transport-Security max-age=15768000;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Permanent Redirect <span class="keyword">for</span> HTTP to HTTPS</span>  </span><br><span class="line">server   </span><br><span class="line">&#123;  </span><br><span class="line">listen 80;  </span><br><span class="line">server_name yourdomain.com;  </span><br><span class="line">return 301 https://$host$request_uri;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>其实可以采用可视化的方式对 Nginx 进行配置，我在 GitHub 上发现了一款可以一键生成 Nginx 配置的神器，相当给力。</p><p>先来看看它都支持什么功能的配置：反向代理、HTTPS、HTTP&#x2F;2、IPv6, 缓存、WordPress、CDN、Node.js 支持、 Python (Django) 服务器等等。</p><p>如果你想在线进行配置，只需要打开网站：<a href="https://nginxconfig.io/">https://nginxconfig.io/</a> , 按照自己的需求进行操作就行了。</p><p>选择你的场景，填写好参数，系统就会自动生成配置文件。</p><p>开源地址：</p><ul><li>github.com&#x2F;digitalocean&#x2F;nginxconfig.io</li></ul><p>网站：</p><ul><li>digitalocean.com&#x2F;community&#x2F;tools&#x2F;nginx</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 搭建 Apache httpd 代理服务器</title>
      <link href="/2022/03/21/apache/"/>
      <url>/2022/03/21/apache/</url>
      
        <content type="html"><![CDATA[<h3 id="检查电脑系统类型"><a href="#检查电脑系统类型" class="headerlink" title="检查电脑系统类型"></a>检查电脑系统类型</h3><p>检查电脑版本是为 32 位操作系统或 64 位操作系统<br>检查方式：“我的电脑” 右键属性</p><h3 id="下载安装Apache-httpd"><a href="#下载安装Apache-httpd" class="headerlink" title="下载安装Apache httpd"></a>下载安装Apache httpd</h3><p>下载地址:<br><a href="https://httpd.apache.org/docs/current/platform/windows.html#down">传送门</a><br><a href="https://brightfuture.top/i/soft/httpd-2.4.53-win64-VS16.zip">64位直接下载</a><br>然后解压到 C 盘根目录，最好是 C:\Apache24，不然就要改 httpd.conf 路径 <strong>Define SRVROOT “C:&#x2F;Apache24”</strong> 配置。</p><h3 id="Listen-端口及-IP-修改"><a href="#Listen-端口及-IP-修改" class="headerlink" title="Listen 端口及 IP 修改"></a>Listen 端口及 IP 修改</h3><p>httpd.conf 文件里搜 Listen 即可。</p><h3 id="加载所需的模块"><a href="#加载所需的模块" class="headerlink" title="加载所需的模块"></a>加载所需的模块</h3><p>LoadModule access_compat_module modules&#x2F;mod_access_compat.so</p><p>LoadModule lbmethod_bybusyness_module modules&#x2F;mod_lbmethod_bybusyness.so</p><p>LoadModule lbmethod_byrequests_module modules&#x2F;mod_lbmethod_byrequests.so</p><p>LoadModule lbmethod_bytraffic_module modules&#x2F;mod_lbmethod_bytraffic.so</p><p>LoadModule lbmethod_heartbeat_module modules&#x2F;mod_lbmethod_heartbeat.so</p><p>LoadModule proxy_module modules&#x2F;mod_proxy.so</p><p>LoadModule proxy_connect_module modules&#x2F;mod_proxy_connect.so</p><p>LoadModule proxy_ftp_module modules&#x2F;mod_proxy_ftp.so</p><p>LoadModule proxy_html_module modules&#x2F;mod_proxy_html.so</p><p>LoadModule proxy_http_module modules&#x2F;mod_proxy_http.so</p><p>LoadModule xml2enc_module modules&#x2F;mod_xml2enc.so</p><h3 id="在最后添加-Proxy-配置"><a href="#在最后添加-Proxy-配置" class="headerlink" title="在最后添加 Proxy 配置"></a>在最后添加 Proxy 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ProxyRequests On</span><br><span class="line"><span class="tag">&lt;<span class="name">Proxy</span>&gt;</span></span><br><span class="line">Require all granted</span><br><span class="line"><span class="tag">&lt;/<span class="name">Proxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h3><p>进入安装文件 bin 目录</p><p>安装成 window 服务：httpd -k install</p><p>启动：httpd -k restart</p><p>安装成服务后，可以在电脑服务列表中找到对应的服务信息。</p><h3 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h3><p>使用浏览器验证代理是否可以访问</p><p>浏览器配置代理，以 360 浏览器为例，选项 -》代理服务器 -》代理服务器设置 -》，手动配置代理，输入的 IP 可为 127.0.0.1，也可为局域网地址或专有网络外网地址，端口为步骤 3 中监听的端口，这里为：8700</p><p>当前教程使用局域网 IP，设置为：192.168.1.2:8700</p><p>尝试访问网站，如果能正常访问，则代理成功，否则重复步骤三，检查配置文件是否配置正确。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App专项测试</title>
      <link href="/2022/03/21/apptest/"/>
      <url>/2022/03/21/apptest/</url>
      
        <content type="html"><![CDATA[<h1 id="App专项测试"><a href="#App专项测试" class="headerlink" title="App专项测试"></a>App专项测试</h1><h3 id="app基础知识"><a href="#app基础知识" class="headerlink" title="app基础知识"></a>app基础知识</h3><h4 id="一、主流操作系统"><a href="#一、主流操作系统" class="headerlink" title="一、主流操作系统"></a>一、主流操作系统</h4><p>android 开发语言： Java、Kotlin</p><p>ios开发语言：objective-c、swift</p><h4 id="二、移动应用分类"><a href="#二、移动应用分类" class="headerlink" title="二、移动应用分类"></a>二、移动应用分类</h4><p>1、本地app（原生）：元素和框架都安装在本地，只有部分数据保存在服务器<br>优点：支持无网络访问<br>支持调用本地服务（相机、相册、通信、GPS、摄像头等）<br>响应熟读较快<br>缺点：开发难度、成本高、周期长<br>优化不好的话本地内存占用会比较高<br>用户升级体验较差<br>发布周期较长<br>2、WebAPP<br>基于所有元素的框架都是通过网络从服务器获取<br>优点：<br>开发难度、成本较低<br>本地内存占用较低<br>用户升级体验极佳<br>发布简单<br>缺点：<br>不支持无网络访问<br>不支持调用本地服务（相机、相册、通信、GPS、摄像头等）<br>响应时间较慢，且受网络环境影响较大<br>3、混合型app<br>单view混合型<br>一个view同一时间只存在本地view或者webview中的一种，本地或web的视图交替出现，web<br>视图作为本地的补充<br>多view混合型<br>一个view同一时间同时存在本地view和webView，本地或web的视图同时出现在一个view<br>中，web视图作为本地的补充</p><h4 id="三、App测试与Web测试的区别"><a href="#三、App测试与Web测试的区别" class="headerlink" title="三、App测试与Web测试的区别"></a>三、App测试与Web测试的区别</h4><p>系统架构<br>APP：C&#x2F;S 客户端 – 服务端<br>WEB：B&#x2F;S 浏览器 – 服务器<br>测试环境<br>APP：除了服务器环境之外，还要考虑客户端环境（手机型号、系统版本、分辨率、ROM等）<br>WEB：基本只需要考虑服务器环境<br>测试方法<br>WEB：链接测试、兼容性测试（浏览器、分辨率）<br>APP：安装&#x2F;卸载测试、升级测试、交叉事件测试、兼容性测试（手机型号、系统版本、分辨率、<br>ROM等）、push（消息推送）测试、免登录测试、App客户端性能测试（电量、流量、稳定性、<br>压力、弱&#x2F;无网络）</p><h4 id="四、App测试工具"><a href="#四、App测试工具" class="headerlink" title="四、App测试工具"></a>四、App测试工具</h4><p>抓包工具：<br>tcpdump<br>wireshark<br>fiddler 默认端口：8888<br>charlies 默认端口：8888<br>安卓测试工具：<br>ADB：安卓调试桥，用来做专项测试<br>monkey：用来做压力、稳定性测试<br>aapt：Android资源打包工具</p><h4 id="五、App专项测试"><a href="#五、App专项测试" class="headerlink" title="五、App专项测试"></a>五、App专项测试</h4><p>1、安装&amp;卸载测试<br>安装测试测试点：<br>安装包能否正常完成安装<br>安装完成后，app能否正常运行、使用<br>安装完成后，图标及应用名称是否正确<br>安装后权限的设置<br>存储空间不足的情况下进行安转<br>已经安装的应用，进行重复安装，是否会覆盖之前版本<br>安装完成后的目录文件结构是否完整<br>安装过程中，遇到中断的况（断电、死机等），如何处理<br>卸载测试测试点：<br>卸载是否有提示信息<br>卸载后是否有残留文件<br>卸载用户数据及隐私文件时，是否有提示信息<br>卸载后，修改的权限是否恢复<br>卸载中断后，已卸载的文件是否恢复<br>2、 升级测试<br>强制升级测试点：<br>升级是否有提示<br>升级提示框不能关闭<br>应用在提示框外的部分，提示框不能消失<br>非强制升级测试点：<br>升级是否有提示<br>关闭升级提示提示框后，应用是否能继续使用<br>新版本用户与旧版本用户能否正常进行交互<br>跨版本升级升级能否正常进行<br>通用测试点：<br>升级完成后应用能否正常运行、使用<br>升级后新的功能或者有更新的功能是否按照新的需求逻辑进行处理<br>升级过程中，遇到中断情况，如何处理<br>3、 交叉事件测试、前后台切换使用应用过程中，接电话&#x2F;短信等<br>使用应用过程中，通过蓝牙&#x2F;WiFi接收文件<br>4、免登陆测试测试点、登录后，关掉应用，等待一段时间后，再次打开应用，是否处于已登录状态<br>登录后，等待免登陆时效过期后，再次打开应用，是否需要重新登录<br>时间跨度测试<br>免登陆时效跨周<br>免登陆时效夸月<br>免登陆时效跨年<br>登录新设备后，原设备免密登录是否失效<br>修改密码后，免登陆是否失效<br><em>5、Push（消息推送）测试点</em>、推送范围<br>全部用户<br>部分用户<br>指定用户<br>推送接收场景<br>亮屏 - 前台<br>亮屏 - 后台<br>亮屏 - 锁屏<br>黑屏 - 前台<br>黑屏 - 后台<br>黑屏 - 锁屏<br>通用<br>推送消息是否按照指定时间、范围、内容进行推送<br>用户关闭推送后，是否还会收到推送消息<br>推送消息是否可以折叠<br>点击推送消息是否能打开应用并跳转到对应链接<br><em>6、兼容性测试</em>、防止APP在不同的机型由于软件、硬件等不同可能出现各种各样的问题<br>测试范围（手机型号、系统版本、分辨率、ROM等）<br>测试方法<br>手工测试1、确定测试覆盖范围<br>通过向产品经理咨询、或者通过市场调研确定<br>通过网络大数据平台获取同类型竞品的主要用户群体来确定<br>2、编写兼容性测试用例<br>3、采购测试设备<br>4、执行测试用例，输出测试报告</p><h4 id="云测试"><a href="#云测试" class="headerlink" title="云测试"></a>云测试</h4><p>1、确定测试覆盖范围<br>通过向产品经理咨询、或者通过市场调研确定<br>通过网络大数据平台获取同类型竞品的主要用户群体来确定<br>2、选择云测试平台<br>Testin 云测 <a href="http://www.testin.cn/">http://www.testin.cn/</a><br>weTest腾讯质量开发平台 <a href="http://wetest.qq.com/">http://wetest.qq.com/</a><br>3、选择测试覆盖范围及测试策略<br>4、购买配额<br>5、执行兼容性测试<br>6、邮件接收测试结果</p><h4 id="测试点"><a href="#测试点" class="headerlink" title="测试点"></a>测试点</h4><p>1、手机型号<br>考虑应用手机排行榜<br>2、系统版本<br>安卓系统：6.0 7.0 ……<br>苹果系统：9.x 10.x……<br>3、屏幕尺寸、分辨率<br>分辨率：2340<em>1080 1080</em>1920 …<br>屏幕尺寸：5.5 4.7 6.43 …<br>4、应用兼容性<br>与手机硬件兼容<br>home键、电源键、音量调节等<br>与外部硬件设备兼容<br>耳机、蓝牙等<br>与操作系统软件兼容<br>wlan设置、系统时间调节、LBS定位等<br>与其他App兼容<br>后台在播放音乐时，进入动态页面点击动态视频的播放，系统如何处理</p><p><em>7、弱&amp;无网测试</em><br>无网络功能是否正常使用<br>页面切换是否正常（无Crash、ANR等问题）<br>Crash 闪退<br>ANR 无响应<br>需要网络加载的内容处理是否正确<br>数据是否会丢失<br>弱网络<br>2G、3G、4G环境下功能是否正常使用<br>2G 15kb&#x2F;s<del>20kb&#x2F;s<br>3G 120kb&#x2F;s</del>600kb&#x2F;s<br>4G 1.5mb&#x2F;s~10mb&#x2F;s<br>高延时环境下功能是否正常使用<br>使用fiddler模拟高延时环境<br>1、弱网开关：performance –&gt; simulate Modem speeds<br>2、自定义弱网（Ctrl + R ）：m_simulateModem: boolean &#x3D; true;<br>if (m_SimulateModem) {<br>&#x2F;&#x2F; Delay sends by 300ms per KB uploaded.<br>oSession[“request-trickle-delay”] &#x3D; “300”;<br>上行 &#x2F; 请求 速度 1kb为300毫秒<br>&#x2F;&#x2F;Delay receives by 150ms per KB downloaded.<br>oSession[“response-trickle-delay”] &#x3D; “150”;<br>下载 速度 1kb为150毫秒<br>高丢包环境下功能是否正常使用<br>使用Network Emulator for windows Toolkit工具模拟高丢包率<br>工具介绍：<a href="https://blog.csdn.net/zytthappy/article/details/85125772">https://blog.csdn.net/zytthappy/article/details/85125772</a><br>用户体验<br>界面内容是否完整<br>弱网&#x2F;无网&#x2F;网络切换&#x2F;升级&#x2F;功能处理时提示是否友好<br>响应时间是否处于用户接收范围<br>2-5-10 (3-5-8）原则（响应策略）<br>2s&#x2F;3s以内，属于用户体验良好<br>超过5s，一些性子比较急躁的用户就会出现多次点击等操作<br>超过8s&#x2F;10s，天部分用户会强制退出APP如果响应时间过长，影响用户体验，则可能出现大部分用户放弃我们的产品转而使用其他同<br>类竟品<br>网络切换<br>以下网络环境切换时，功能是否正常，APP是否会出现crash、ANR等情况，切换是否有提示<br>3G、4G → wifi<br>wifi → 3G、4G<br>4G → 3G<br>3G → 4G<br><em>8、压力测试</em><br>测试场景<br>APP处于待机时，占用安卓设备资源情况<br>APP 正常使用时，占用安卓设备资源情况<br>APP频繁使用时，占用安卓设备资源情况<br>测试方法<br>使用Monkey命令（adb内置）向待测应用发送随机事件<br>使用命令行或者其他监测工具观察应用占用资源情况<br>如果发现内存占用持续等额上涨，则大概率为内存泄漏<br><em>9、稳定性测试</em><br>测试方法<br>准备多台安卓设备，使用Monkey发送10w次以上的命令（频率，次数参考实际业务），输出<br>Monkey日志，检查日志是否包含如下关键字：<br>ANP 程序无响应<br>Crash 程序闪退、崩溃<br>Exception 程序异常<br>处理方法：如果包含上述关键字，将日志、截图及Monkey命令和seed值打包提交给开发<br>seed值：每次执行monkey的唯一识别码 序号<br><em>10、流量</em><br>大流量处理<br>比如一些视频、压缩文件或者<br>APP升级等大流量数据处理时，是否有提示网络情况，<br>流量消耗等<br>Fiddler代理手机网络<br>手机和pc连接同一wifi (保证处于同一网段)<br>Tools- +options +Connections<br>设置Fiddler代理端口-Fiddler listens on port勾选如下两项<br>Act as system proxy on startup<br>Allow remote computers to connect<br>fiddler抓包工具</p><h3 id="adb工具"><a href="#adb工具" class="headerlink" title="adb工具"></a>adb工具</h3><p> ADB工作原理<br>ADB结构<br>adb client（pc端）<br>adb server（pc端）<br>adb daemon（Android端）<br>原理：<br>adb server 与 adb deamon 建立TCP连接，<br>再通过adb client 将指令发送给 adb server<br>adb server再将指令转发给adb daemon<br>adb daemon 再对指令进行解析和运行<br>ADB 服务默认端口</p><h4 id="安装-amp-常用命令"><a href="#安装-amp-常用命令" class="headerlink" title="安装&amp;常用命令"></a>安装&amp;常用命令</h4><p>ADB工具启动<br>启动adb server服务：<br>adb star-server 默认占用端口：5037<br>查看端口占用情况：<br>netstat -ano|findstr 5037<br>停止adb server服务：<br>adb kill-server<br>2、ADB工具的设备连接<br>查看所有ADB工具连接的Android设备列表：<br>adb devices<br>该命令输出结果为[serialNumber] [state]<br>serialNumber为设备序列号，也可以理解为连接设备的名称<br>state表示设备连接状态：<br>offline：表示设备未连接成功或无响应<br>device：表示设备已连接，但需要注意这个状态并不意味着Android系统已经完全启动和可操<br>作，在设备启动过程中ADB工具就已经可以连接设备<br>no device：表示没有设备连接<br>获取ADB工具所连接设备的序列号：<br>adb get-serialno<br>断开连接：<br>adb disconnect 设备IP:端口号<br>示例：adb disconnect 127.0.0.1:62001<br>打开连接：<br>adb connect 设备IP:端口号<br>获取安卓设备已安装的应用包名：<br>adb shell pm list packages<br>查看当前活动的包信息：<br>adb shell dumpsys activity | findstr “mFocusedActivity”<br>查看指定应用的安装路径：<br>adb shell pm path 包名<br>清除指定应用的历史数据和缓存：<br>adb shell pm clear 包名<br>将安卓端文件下载到PC端：<br>adb pull downFile（需要下载的安卓设备上的文件）<br>departPath（文件下载后所在PC端口的目录）<br>向安卓设备安装APP应用（ -r：表示覆盖参数）：<br>adb install apk包路径<br>&#x2F;data&#x2F;app&#x2F;：app默认安装路径<br>卸载安卓设备中指定应用（-k：保留数据和缓存目录）：<br>adb uninstall 应用包名</p><h4 id="monkey工具-amp-logcat工具"><a href="#monkey工具-amp-logcat工具" class="headerlink" title="monkey工具&amp;logcat工具"></a>monkey工具&amp;logcat工具</h4><p><em>1、monkey工具</em><br>定义：是Android系统的一个内置工具，通过Monkey可以向指定应用发送随机指令<br>可以生成伪随机用户事件（例如点击、移动或手势）以及很多系统事件<br>可以使用Monkey,以随机且可重复的方式对正在开发的应用进行压力测试<br>注意：monkey压测手机的稳定性，不是针对服务器端<br>语法：<br>adb shell monkey<br>[参数] [包名] 事件数量<br>参数：<br>-p 指定向某个应用发送指令，如果需要向多个应用发送，则指定多个-p<br>示例：adb shell monkey -p com.amaker.mp 200<br>解释：对警务通应用发出200个随机事件<br>-v monkey输出的日志级别,总共三个级别，v越多日志越详细<br>-v<br>-v -v<br>-v -v -v示例：adb shell monkey -v -v -v -p com.amaker.mp 200 &gt; d:&#x2F;log&#x2F;test01.txt<br>解释：对警务通应用发出200个随机事件，并将最详细的日志写入test01文件中<br>-s 重现对应seed值的伪随机序列<br>示例：adb shell monkey -s 1646438425753 -v -v -v -p com.amaker.mp 200<br>解释：重现seed值为1646438425753的伪随机序列<br>–ignore-crashes<br>当monkey命令执行时，遇到闪退，崩溃事件，忽略闪退，崩溃事件，继续执行<br>–ignore-timeouts<br>当monkey命令执行时，遇到超时事件，忽略超时事件，继续执行<br>–throttle N<br>设置事件间隔（单位∶ms）<br>–pct-事件名 事件占比<br>示例：adb shell monkey –pct-touch 30<br>解释：设置该次Monkey命令中百分之30的时间为触摸事件<br>日志<br>0：15.0% 触摸事件TOUCH，–pct-touch<br>1：10.0% 手势事件MOTION，–pct-motion<br>2：2.0% 号两指缩放事件PINCHZOOM，–pct-pinchzoom<br>3：15.0% 轨迹球事件TRACKBALL，–pct-trackball<br>4：-0.0% 屏幕旋转事件ROTATION，–pct-rotation<br>5：25.0% 基本导航事件nav，–pct-nav<br>6：15.0% 主要导航事件majornav，–pct-majornav<br>7：2.0% 系统按钮事件syskeys，–pct-syskeys<br>8：2.0% 启动activity事件appswitch，-pct-appswitch<br>9：1.0% 键盘轻弹事件flip，–pct-flip<br>10：13.0% 其它事件，包括按键和不常用的按键<br>从日志中捕捉以下关键字：<br>1、无响应：ANR<br>2、闪退：crash<br>3、异常：exception<br>4、强退：force closed<br>5、错误：error<br><em>2、logcat工具（实时记录日志）</em><br>定义：是Android系统中的一个收集和过滤系统及应用程序日志的查看器语法：adb logcat 或 adb shell logcat<br>参数：<br>-s &lt;标签名&gt;：&lt;优先级&gt;<br>根据标签名及优先级过滤日志内容 标签名可以省略为*<br>示例：<br>*∶优先级<br>V∶Verbose（明细）<br>D∶Debug（调试）<br>I∶Info（信息）<br>W∶Warn（警告）<br>E∶Error（错误）<br>F∶Fatal（严重错误）<br>-v &lt;需要显示的内容&gt;<br>设置logcat日志输出格式<br>示例：adb logcat -v time &gt; d:&#x2F;log&#x2F;test.txt<br>解释：将Android系统运行日志写入test文件，并按日期倒序排序<br>time 安卓系统时间<br>thread 线程ID<br>long 时间、进程<br>ID、线程ID、优先级、标签<br>-p &lt;缓冲区&gt;<br>输出指定缓冲区的日志内容，默认输出<br>system和main<br>radio：输出通信系统的log<br>system：输出系统组件的log<br>event：输出event模块的log<br>main：所有java层的log和不属于上面3层的log<br>crash：闪退缓冲区<br>-c 清理缓冲区日志<br>示例：adb logcat -c</p><p>解释：清空缓存。（使用场景：上一个环境已经没有问题了，将之前的历史记录清除）</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vmware上安装Linux</title>
      <link href="/2022/02/19/%E5%9C%A8Vmware%E4%B8%8A%E5%AE%89%E8%A3%85Linux/"/>
      <url>/2022/02/19/%E5%9C%A8Vmware%E4%B8%8A%E5%AE%89%E8%A3%85Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux在VMware安装步骤"><a href="#Linux在VMware安装步骤" class="headerlink" title="Linux在VMware安装步骤"></a>Linux在VMware安装步骤</h1><h3 id="一-确保CPU支持虚拟化"><a href="#一-确保CPU支持虚拟化" class="headerlink" title="一.确保CPU支持虚拟化"></a>一.确保CPU支持虚拟化</h3><p>（以联想为例）开机时按 F1 进入 BIOS 》Advanced 》CPU SetUp 》Intel(R) Vlrtualization Techmology 》Enabled 按 F10 </p><h3 id="二-安装-VM-虚拟机"><a href="#二-安装-VM-虚拟机" class="headerlink" title="二. 安装 VM 虚拟机"></a>二. 安装 VM 虚拟机</h3><p>1、VMware12：<a href="https://pan.baidu.com/s/1Jm00hi4C6Dm5Bj-WMm8l-w">下载链接</a>提取码：ben8，傻瓜式下一步安装就ok了！</p><p>这里就不过多的介绍了，实在安装不了就百度把！</p><h3 id="三-安装Linux"><a href="#三-安装Linux" class="headerlink" title="三.安装Linux"></a>三.安装Linux</h3><p>1、这里使用安装的版本为CentO S 7 你可以通过<a href="https://pan.baidu.com/s/1we401DGtsA732RW8iR27HA">百度网盘</a>提取码：ben8，也可以通过官网下载：<a href="https://www.centos.org/download/">https://www.centos.org/download/</a></p><p>2、打开Vmware，点击新建虚拟机，选择典型值安装（新手建议选择典型值安装）点击“下一步”<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%201.png" alt="典型值"></p><p>3、选择安装程序光盘映像文件，点击浏览，找到你下载的centos，点击打开，然后点击“下一步”<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%202.png" alt="选择镜像文件"></p><p>4、虚拟机名称：（根据自己的喜好自定义）位置：你所要安装的位置（建议不要使用中文路径）点击“下一步”<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%203.png" alt="选择安装位置"></p><p>5、虚拟机配置，磁盘大小选择默认，设置大了也没关系，实际系统占用多少就是多少，不会造成磁盘浪费，这里选择“将虚拟磁盘储存为单个文件”这样可以避免文件碎片化，点击“下一步”<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%204.png" alt="虚拟机配置"></p><p>6、其他硬件配置 点击“自定义硬件”内存选择2G，处理器选择单个双核、网络适配器选择“桥接”模式、点击“关闭” </p><p><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%208.png" alt="自定义硬件"></p><p>7、点击“完成”，开启虚拟机就会进入如下图界面，光标移到“install centos 7”按Enter回车键<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%209.png" alt="开始安装"></p><p>8、这里是选择系统的语言，默认是English，可以选择其他语言，我这里就使用默认，点击”continue”</p><p><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%20(0.png" alt="选择语言"></p><p>9、选择时区，选择安装路径（默认就行点击“Done”），选择联网，点击“Begin Installation”</p><p><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%2013.png" alt="安装"></p><p><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%2016.png" alt="设置密码"></p><p>这里设置完密码，等待，点击reboot重启就ok了</p><p>10、等待安装完成，输入用户名（这里是超级用户root）密码进入系统  恭喜你  安装成功！你可以大展身手使用Linux了<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/centos7%E5%AE%89%E8%A3%85%20(17).png" alt="Linux界面"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试</title>
      <link href="/2022/02/13/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/02/13/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是接口"><a href="#一、什么是接口" class="headerlink" title="一、什么是接口"></a>一、什么是接口</h3><p>1、（软件）接口一般来讲分为两种：<br>(1)程序内部的接口：方法与方法、模块与模块之间的交互，程序内部抛出的接口，如登录发帖，发帖就必须要登录，如果不登录不能发帖，发帖和登录这两个模块之间就要有交互，就会抛出一个接口，进行内部系统调用。<br>(2)系统对外的接口：从别人的网站或服务器上获取资源或信息，对方不会提供数据库共享，只能提供一个写好的方法来获取数据，如购物网站和第三方支付之间，购物网站支付时可选择第三方支付方法，但第三方不会提供自己的数据库给购物网站，只会提供一个接口，供购物网站进行调用。</p><p>2、接口分类一般分为两类：<br>(1)webService接口：走soap协议通过http传输，请求报文和返回报文都是xml格式的。测试时需要通过工具才能进行调用、测试。少数公司还在使用这种接口，如医院等行业。<br>(2)http api接口：走http协议，通过路径来区分调用的方法，请求和报文都是key-value形式的，返回报文一般都是json串，有get和post等方法。目前来讲，是最常用的。<br>3、接口返回数据<br>接口返回的数据一般都是json串，json是一种通用的数据类型，格式为key-value。<br>4、前端、后端区别？<br>前端：客户端。通俗来讲，一般情况下，web端或app端能看见的地方以及一些简单的校验，都属于前端。<br>（ps：网站上显示的后台管理不属于后端哦）<br>后端：服务器端。web端或app端的系统逻辑、如购物时扣除余额，微博发到哪里等都是由后端实现的。<br>接口的优点：扩展性强、基于接口方便扩展功能，一个接口对应一个功能<br>软件接口IPA：以http协议的形式提供，定义了输入、输出，(network)网络日志<br>通过分析接口 定位bug 属于前端or后端<br>URL:统一资源定位符<br>接口测试流程<br>1、获取接口文档</p><h3 id="二、网络基本概念"><a href="#二、网络基本概念" class="headerlink" title="二、网络基本概念"></a>二、网络基本概念</h3><p>客户端(Client):<br>服务端(Server):为客户端提供服务，提供资源(数据)<br>请求(Request):客户端向服务器索取数据的一种行为<br>响应(Response)：服务器对客户端请求做出的反应(返回数据给客户端)<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%BE%E8%A7%A3.png" alt="客户端&amp;服务器"></p><h3 id="三、HTTP协议"><a href="#三、HTTP协议" class="headerlink" title="三、HTTP协议"></a>三、HTTP协议</h3><p>HTTP协议<br>1.简介<br>HTTP协议(HyperTextTransferProtocol,超文本传输协议),是用于从万维网(w:WorldwideWeb)服务器传输超文本到本地浏览器的传送协议<br>HTTP基于TCP&#x2F;IP通信协议来传递数据<br>HTTP基于客户端&#x2F;服务端(C&#x2F;S)架构模型,通过一个可靠的链接来交换信息,是一个无状态的请求&#x2F;响应协议<br>2.特点<br>(1)HTTP是无连接:无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求,并收到客户的应答后,即断开连接。采用这种方式可以节<br>省传输时间<br>(2)HP是媒体独立的:只要客户端和服务器知道如何处理的数据内容,任何类型的数据都可以通过HP发送。客户端以及服务器指定使用适合的<br>MIME-type内容类型<br>(3)HTTP是无状态:无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息,则它必须重传,这样可能导致每次连接<br>传送的数据量增大。另一方面,在服务器不需要先前信息时它的应答就较快<br>HTTP请求报文<br>HTP请求报文由4部分组成(请求行4请求头+空白行+请求体):空白行没有实际意义,作用是区别请求头和请求体<br>osi七层模型简化五层模型<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/osi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.gif" alt="osi七层模型"><br>协议:计算机通信网络中两台计算机之间通信必须共同遵守的规则或规定<br>http协议:超文本传输协议,是一种规定了浏览器和服务器之间通信的规则,默认端口:80<br>https协议是在http协议的基础上多了一个sll(sll安全证书)安全性更高，相当于http协议的升级版 默认端口:443<br>URL:统一资源定位符 Uniform Resource Locator<br>概念:互联网上资源的地址、位置。每一个资源都有一个唯一的<br>格式:协议:&#x2F;&#x2F;主机地址&#x2F;路径<br>主机地址:ip:port<br>DNS(域名解析服务商，114.114.114.114:中国电信、8.8.8.8:谷歌)<br>GET\P0ST请求方法<br>GET<br>提交的数据显示在地址栏(ur1后面)、不安全;提交的数据量有限制;不重要的数据使用GET<br>P0ST报文体<br>隐式提交数据、更安全;没有数据量大小的限制;重要数据使用POST<br>数据传递的格式<br>Json数据:<br>{<br>“属性名1”:”属性值<br>“属性名2”:”属性值”<br>“属性名3”:”属性值<br>}</p><h3 id="四、Jmeter的使用"><a href="#四、Jmeter的使用" class="headerlink" title="四、Jmeter的使用"></a>四、Jmeter的使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Windows X64操作系统Jmeter下载地址：<a href="https://pan.baidu.com/s/1GqYw9TmFI9lAD8GBeizlUQ">提取码：ben8</a><br>将安装包下载解压到一个你喜欢的位置 进入到Jmeter的bin目录下  找到Jmeter.bat双击它便能启动和使用了<br>如果启动失败，那你应该是缺少一个启动环境Jdk 下载安装并配置好环境就能启动了<br>Windows X64操作系统Jdk下载：<a href="%E9%93%BE%E6%8E%A5%EF%BC%9Ahttps://pan.baidu.com/s/1oek8H1cVHisC8nmkVgBqIw">提取码：ben8</a><br>Jmeter主要元件<br>1、测试计划:是使用』Meer进行测试的起点,它是其它 JMeter测试元件的容器<br>2、线程组:代表一定数量的用户,它可以用来模拟用户并发发送请求。实际的请求内容在 Sampler中定义,它被线程组包含。<br>3、配置元件:维护 Sampler需要的配置信息,并根据实际的需要修改请求的内容<br>4、前置处理器:负责在请求之前工作,常用来修改请求的设置<br>5、定时器:负责定义请求之间的延迟间隔<br>6、取样器( Sampler):是性能测试中向服务器发送请求,记录响应信息、响应时间的最小单元,如: Http Request Sampler、 FTP Request Sample、 TCP Request Sample<br>BC Request Sampler等,每一种不同类型的 sampler可以根据设置的参数向服务器发出不同类型的请求。<br>7、后置处理器:负责在请求之后工作,常用获取返回的值<br>8、断言:用来判断请求响应的结果是否如用户所期望的<br>9、监听器:负责收集测试结果,同时确定结果显示的方式。<br>10、逻辑控制器:可以自定义 IMeter发送请求的行为逻辑,它与 Sampler结合使用可以模拟复杂的请求序列<br>参考：<a href="https://pan.baidu.com/s/1yRBIhfEw5F_ZZ6Iia92Zmw">Jmeter的使用 提取码：ben8</a><br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Jmeter01.png" alt="Jmeter逻辑控制器  循环"><br>11、正则表达式提取器<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8.png" alt="后置处理器——正则表达式提取器"><br>正则表达式:过滤数据的规则是一种语言规则<br>元字符<br>限定符<br>匹配字符<br>至少匹配一次<br>d匹配数字<br>匹配0次或者多次<br>[0-9]在0-9之间的数字<br>只匹配一次<br>[a-z]在小写字母a-z之间的字母n}匹配n次<br>[A-2]在大写字母A-Z之间的字母{n,m}匹配n到m次<br>[a-zA-ZI<br>( com cn)com或者cn固定字符匹配<br>12、Json提取器<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/json%E6%8F%90%E5%8F%96%E5%99%A8.png" alt="后置处理器——json提取器"><br>13、txt&amp;csv文件的处理<br><a href="https://pan.baidu.com/s/1fNVmwRo7z4z7ItNVnWJlmA">txt&amp;csv文件的处理参考——提取码：ben8</a></p><h3 id="五、Fiddler抓包工具的简单使用"><a href="#五、Fiddler抓包工具的简单使用" class="headerlink" title="五、Fiddler抓包工具的简单使用"></a>五、Fiddler抓包工具的简单使用</h3><p>Windows X64操作系统Fiddler<a href="https://pan.baidu.com/s/1iWJWGMxPAvNcc6J8i1Gn7w">下载地址——提取码：ben8</a>仅持win7以上操作系统版本  win以下操作系统须安装Microsoft Visual C++ 库文件<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler%E9%A1%B5%E9%9D%A2%E5%9B%BE%E8%A7%A3.png" alt="Fiddler界面"><br>1、Fiddler不支持https协议的基本设置<br>菜单栏&gt;Tools&gt;Options…<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler_https1.png" alt="Fiddler"><br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler_https2.png" alt="Fiddler2"><br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler%E8%87%AA%E5%8A%A8%E5%93%8D%E5%BA%94.png" alt="Fiddler自动响应"></p><h3 id="六、通过Fiddler抓取Jmeter的数据"><a href="#六、通过Fiddler抓取Jmeter的数据" class="headerlink" title="六、通过Fiddler抓取Jmeter的数据"></a>六、通过Fiddler抓取Jmeter的数据</h3><p>通过设置Jmeter的代理服务器<img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/Fiddler%E6%8A%93%E5%8F%96Jmeter%E6%95%B0%E6%8D%AE.png"></p><h3 id="七、问题"><a href="#七、问题" class="headerlink" title="七、问题"></a>七、问题</h3><p>1、如果没有接口文档 你怎么做接口测试？<br>答：通过浏览器抓包 分析<br>2、通过工具抓包 比如Fiddler工具抓包分析<br>问题2：怎样做第三方接口？<br>答：Fiddler下面有一个AutoResponder  通过设置AutoResponder可以做</p>]]></content>
      
      
      <categories>
          
          <category> 接口测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断言&amp;测试用例管理&amp;输出html测试报告</title>
      <link href="/2022/01/13/unitest/"/>
      <url>/2022/01/13/unitest/</url>
      
        <content type="html"><![CDATA[<h1 id="第三-章unittest框架"><a href="#第三-章unittest框架" class="headerlink" title="第三 章unittest框架"></a>第三 章unittest框架</h1><h3 id="3-1-unittest简介"><a href="#3-1-unittest简介" class="headerlink" title="3.1 unittest简介"></a>3.1 unittest简介</h3><p>unittest是一个python版本的单元测试框架，可以用于python的单元测试。相似的其它语言工具Java的Junit，C#的Nunit等。可以使用Unittest做单元测试，也可以完成Web自动化测试。</p><ul><li>自动化测试用例的组织和管理</li><li>提供丰富的比较方法、完成结果的检查</li><li>提供执行过程数据、如：执行时间、执行结果等</li></ul><h3 id="3-2-unittest-语法"><a href="#3-2-unittest-语法" class="headerlink" title="3.2 unittest 语法"></a>3.2 unittest 语法</h3><ul><li>Test Case：一个TestCase实例就是一个测试用例，即一个test开头的测试函数。</li><li>Test Fixture：用于测试前的环境初始化和测试后的环境清理，通过setUp函数和tearDown函数完成。</li><li>Test Runner：unittest单元测试框架提供了TextTestRunner类来运行多个Test Suite或test case。 </li><li>Test Suite：一个功能测试需要很多Test Case，可以多个测试用例统一进行执行，把多个用例加到一个Test Suite中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest <span class="comment"># 导入unittest模块</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">self</span>): <span class="comment"># 初始环境</span></span><br><span class="line">        self.browser = webdriver.Chrome()</span><br><span class="line">        self.browser.get(<span class="string">&#x27;http://127.0.0.1:8080/oa/&#x27;</span>) </span><br><span class="line">        self.browser.implicitly_wait(<span class="number">10</span>) <span class="comment"># 隐性等待</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test001</span>(<span class="params">self</span>): <span class="comment"># 测试主体部分</span></span><br><span class="line">        self.browser.find_element_by_name(<span class="string">&#x27;loginId&#x27;</span>).send_keys(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        self.browser.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;sys123456&#x27;</span>)</span><br><span class="line">        cg = self.browser.find_element_by_id(<span class="string">&#x27;button_submit&#x27;</span>).click()</span><br><span class="line">        <span class="keyword">if</span> cg == <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line">        self.browser.find_element_by_partial_link_text(<span class="string">&#x27;退出登录&#x27;</span>).click()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test002</span>(<span class="params">self</span>):</span><br><span class="line">        self.browser.find_element_by_name(<span class="string">&#x27;loginId&#x27;</span>).send_keys(<span class="string">&#x27;admin1&#x27;</span>)</span><br><span class="line">        self.browser.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;sys1234567&#x27;</span>)</span><br><span class="line">        self.browser.find_element_by_id(<span class="string">&#x27;button_submit&#x27;</span>).click()</span><br><span class="line">        sb = self.browser.find_element_by_xpath(</span><br><span class="line"><span class="string">&#x27;/html/body/div[1]/div/table/tbody/tr[2]/td[2]/div/table/tbody/tr[2]/td/div/table/tbody/tr/td[2]&#x27;</span>)</span><br><span class="line">        sb = sb.text</span><br><span class="line">        <span class="keyword">if</span> sb == <span class="string">&#x27;登录名或密码错误，请重试！&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(sb)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">self</span>): <span class="comment"># 清理环境</span></span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        self.browser.close() <span class="comment"># 关闭浏览器</span></span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><h3 id="3-3-断言"><a href="#3-3-断言" class="headerlink" title="3.3 断言"></a>3.3 断言</h3><p>断言方法是 unittest 框架提供的一组方法，可以通过这些方法完成期望结果和实际结果的对比。assert+空格+要判断语句+逗号+“报错语句”  python提供<br>assertEqual(a,b,msg&#x3D;None) 检查a&#x3D;&#x3D;b，不等则报错<br>assertNotEqual(a,b,msg&#x3D;None) 检查a!&#x3D;b，相等则报错<br>assertIn(a,b,msg&#x3D;None) 检查a in b，不在报错<br>assertNotIn(a,b,msg&#x3D;None) 检查a not in b，在报错<br>assertTrue(a,msg&#x3D;None) 检查表达式a成立，不成立报错<br>assertFalse(a,msg&#x3D;None) 检查表达式a不成立，成立报错assertIsInstance(obj,cls,msg&#x3D;None) 检查obj是cls一个实例，是则pass，不是就报错<br>assertNotIsInstance(obj,cls,msg&#x3D;None）检查obj不是cls一个实例，是则pass<br> self.assertIsNone(expr,msg)<br> self.assertIsNotNone(expr,msg)</p><p>断言 特殊语法1:assert a,b,”报错信息” 语法2：self.assertXXX(a,b,msg&#x3D;”报错信息”)</p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAsser</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):    <span class="comment"># 初始化环境</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试开始&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>): <span class="comment"># 清理环境</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试结束&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test001</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">3</span> == <span class="number">5</span>,<span class="string">&quot;错误&quot;</span></span><br><span class="line">        <span class="comment"># 解释：预期结果(断言)：3等于5 这个表达式成立</span></span><br><span class="line">        <span class="comment"># 实际结果：3等于5 这个表达式不成立　所以，预期结果和实际结果不符　则报错并打印报错信息</span></span><br><span class="line">        self.assertEqual(<span class="number">10</span>,<span class="number">100</span>,msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        <span class="comment"># 解释：预期结果(断言)：10等于100 这个表达式成立</span></span><br><span class="line">        <span class="comment"># 实际结果：10等于100 这个表达式不成立　所以，预期结果和实际结果不符　则报错并打印报错信息</span></span><br><span class="line">        self.assertEqual(<span class="number">10</span>,<span class="number">10</span>,msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        <span class="comment"># 解释：预期结果(断言)：10等于10 这个表达式成立</span></span><br><span class="line">        <span class="comment"># 实际结果：10等于100 这个表达式成立　所以，预期结果和实际结果相符　则不报错</span></span><br><span class="line">        self.assertNotEqual(<span class="number">10</span>,<span class="number">10</span>,msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        self.assertNotEqual(<span class="number">10</span>,<span class="number">20</span>,msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        self.assertIn(<span class="number">1</span>,[<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        self.assertIn(<span class="number">3</span>,[<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        self.assertNotIn(<span class="string">&#x27;a&#x27;</span>,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>&#125;,msg=<span class="string">&quot;错误&quot;</span>)</span><br><span class="line">        self.assertNotIn(<span class="string">&#x27;2&#x27;</span>,&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>&#125;,msg=<span class="string">&quot;错误&quot;</span>) <span class="comment"># 注：assertNotIn对于字典来说，它只能判断键 不判断值</span></span><br><span class="line">        self.assertTrue(<span class="number">6</span> == <span class="number">6</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertTrue(<span class="number">6</span> == <span class="number">7</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertFalse(<span class="number">6</span> == <span class="number">6</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertFalse(<span class="number">6</span> == <span class="number">7</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIs(<span class="number">5</span>,<span class="number">6</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIs(<span class="number">5</span>,<span class="number">5</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">People</span>: <span class="comment"># 创建类</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;人类&#x27;</span>)</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;犬类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        zs = People() <span class="comment"># 实例化对象赋给zs</span></span><br><span class="line">        erha = Dog(<span class="string">&#x27;二哈&#x27;</span>)</span><br><span class="line">        self.assertIsInstance(erha,People,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsInstance(erha,Dog,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertNotIsInstance(erha,People,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertNotIsInstance(erha,Dog,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsNone(<span class="literal">None</span>,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsNone(People,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsNone(Dog,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsNotNone(Dog,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">        self.assertIsNotNone(People,msg=<span class="string">&#x27;错误&#x27;</span>)</span><br><span class="line">unittest.main()</span><br></pre></td></tr></table></figure><h3 id="3-4-测试用例管理"><a href="#3-4-测试用例管理" class="headerlink" title="3.4 测试用例管理"></a>3.4 测试用例管理</h3><p>通过Test Suite 测试集（测试套件）来组装单个测试用例，然后通过addTest方法加载<br>TestCase添加到TestSuite中。接着调用unittest框架的TextTestRunner( )类，通过<br>TextTestRunner对象调用Run()方法运行suite中所组装的测试用例。<br> discover方法批量执行脚本用例。使用discover方法会自动收集指定目录下的测试用例添加到测试套件中，然后通过run()方法执行discover，大大简化了测试用例的查找和执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>(unittest.TestCase): <span class="comment"># 测试类1</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>): <span class="comment"># 初始环境</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试开始&quot;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试结束&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test001</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类1：第一条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test002</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类1：第2条测试用例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>(unittest.TestCase): <span class="comment"># 测试类2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00１</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类２：第１条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00２</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类２：第２条测试用例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test3</span>(unittest.TestCase): <span class="comment"># 测试类3</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00１</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类3：第一条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00２</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类3：第一条测试用例&quot;</span>)</span><br><span class="line">unittest.main() <span class="comment"># 方法1 完全覆盖</span></span><br><span class="line"><span class="comment"># 构建测试集</span></span><br><span class="line">suite = unittest.TestSuite() <span class="comment">#方法2：验证测试</span></span><br><span class="line">suite.addTest(Test1(<span class="string">&#x27;test001&#x27;</span>))</span><br><span class="line">suite.addTest(Test3(<span class="string">&#x27;test002&#x27;</span>))</span><br><span class="line">suite.addTest(Test2(<span class="string">&#x27;test001&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line"><span class="comment"># 构建测试集</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">r&#x27;D:\chenben\pythonProject\test&#x27;</span>,pattern=<span class="string">&#x27;te*.py&#x27;</span>)</span><br><span class="line"><span class="comment"># 测试用例存放的路径</span></span><br><span class="line"><span class="comment"># 执行测试</span></span><br><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><h3 id="3-5-HTML测试报告"><a href="#3-5-HTML测试报告" class="headerlink" title="3.5 HTML测试报告"></a>3.5 HTML测试报告</h3><p>自动化测试执行完成以后，需要输出一个完整的测试报告，供测试人员查看测试执行情况，确认自动化测试执行发现的缺陷情况。<br> HTMLTestRunner是Python标准库的unittest单元测试框架的一个扩展，可以生成一个可读性很强的HTML格式的测试报告。<br>下载地址：<a href="http://tungwaiyip.info/software/HTMLTestRunner.html">http</a><a href="http://tungwaiyip.info/software/HTMLTestRunner.html">:&#x2F;&#x2F;tungwaiyip.info&#x2F;software&#x2F;HTMLTestRunner.html</a><br>下载HTMLTestRunner.py文件，然后将其复制到你的python安装目录下（以实际安装目录为准）<br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/my_imgstest1.png" alt="test1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>(unittest.TestCase): <span class="comment"># 测试类1</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>): <span class="comment"># 初始环境</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试开始&quot;</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;测试结束&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test001</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类1：第一条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test002</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类1：第2条测试用例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>(unittest.TestCase): <span class="comment"># 测试类2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00１</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类２：第１条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00２</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类２：第２条测试用例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test3</span>(unittest.TestCase): <span class="comment"># 测试类3</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00１</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类3：第一条测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test00２</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类3：第一条测试用例&quot;</span>)</span><br><span class="line"><span class="comment"># 用HTML输出测试报告</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">r&#x27;D:\test\测试报告.html&#x27;</span>,<span class="string">&#x27;bw&#x27;</span>) <span class="comment"># 测试报告存在的路径，可以不写</span></span><br><span class="line">suite = unittest.defaultTestLoader.discover(<span class="string">r&#x27;D:\test&#x27;</span>,pattern=<span class="string">&#x27;te*.py&#x27;</span>) <span class="comment"># 测试用例存放的路径</span></span><br><span class="line"><span class="comment"># 生成html测试报告</span></span><br><span class="line">file = HTMLTestRunner.HTMLTestRunner(</span><br><span class="line">    stream = file,</span><br><span class="line">    title = <span class="string">&#x27;测试报告&#x27;</span>,</span><br><span class="line">    description = <span class="string">&#x27;测试信息&#x27;</span></span><br><span class="line">)</span><br><span class="line">file.run(suite)</span><br><span class="line"><span class="comment"># 执行测试</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/my_imgstest2.png" alt="test2"><br><img src="https://cdn.jsdelivr.net/gh/ben520/my_imgs@main/my_imgstest3.png" alt="test3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> unittest框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础</title>
      <link href="/2021/12/17/ruanjianjichu/"/>
      <url>/2021/12/17/ruanjianjichu/</url>
      
        <content type="html"><![CDATA[<h1 id="软件测试基础"><a href="#软件测试基础" class="headerlink" title="软件测试基础"></a>软件测试基础</h1><h2 id="技术团队构成"><a href="#技术团队构成" class="headerlink" title="技术团队构成"></a>技术团队构成</h2><h3 id="项目经理"><a href="#项目经理" class="headerlink" title="项目经理"></a>项目经理</h3><h4 id="工作职责"><a href="#工作职责" class="headerlink" title="工作职责"></a>工作职责</h4><ol><li><p>负责整个团队的日常管理</p></li><li><p>统筹全局</p><h4 id="人员构成"><a href="#人员构成" class="headerlink" title="人员构成"></a>人员构成</h4><h5 id="1人"><a href="#1人" class="headerlink" title="1人"></a>1人</h5><h4 id="产品团队-PM"><a href="#产品团队-PM" class="headerlink" title="产品团队(PM)"></a>产品团队(PM)</h4><ul><li><p>负责设计、确定、细化具体的需求</p></li><li><p>创造产品</p><h5 id="人员构成-1"><a href="#人员构成-1" class="headerlink" title="人员构成"></a>人员构成</h5><h6 id="一般1-8人"><a href="#一般1-8人" class="headerlink" title="一般1~8人"></a>一般1~8人</h6><h4 id="产出"><a href="#产出" class="headerlink" title="产出"></a>产出</h4><ul><li>产品需求规格说明书</li></ul></li></ul><h6 id="需求文档"><a href="#需求文档" class="headerlink" title="需求文档"></a>需求文档</h6><h6 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h6><h6 id="软件需求文档"><a href="#软件需求文档" class="headerlink" title="软件需求文档"></a>软件需求文档</h6><h6 id="SRS"><a href="#SRS" class="headerlink" title="SRS"></a>SRS</h6><h6 id="PRD"><a href="#PRD" class="headerlink" title="PRD"></a>PRD</h6></li></ol><h2 id="软件测试基本概念"><a href="#软件测试基本概念" class="headerlink" title="软件测试基本概念"></a>软件测试基本概念</h2><h3 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h3><h4 id="弄清楚实际结果和预期结果的差异"><a href="#弄清楚实际结果和预期结果的差异" class="headerlink" title="弄清楚实际结果和预期结果的差异"></a>弄清楚实际结果和预期结果的差异</h4><h4 id="通过人工或自动化的手段来检测被测对象是否符合用户需求"><a href="#通过人工或自动化的手段来检测被测对象是否符合用户需求" class="headerlink" title="通过人工或自动化的手段来检测被测对象是否符合用户需求"></a>通过人工或自动化的手段来检测被测对象是否符合用户需求</h4><h3 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h3><h4 id="保障产品符合用户需求，发现并解决问题，预估产品质量"><a href="#保障产品符合用户需求，发现并解决问题，预估产品质量" class="headerlink" title="保障产品符合用户需求，发现并解决问题，预估产品质量"></a>保障产品符合用户需求，发现并解决问题，预估产品质量</h4><h4 id="降低产品失败的风险，提高用户对产品质量的信心"><a href="#降低产品失败的风险，提高用户对产品质量的信心" class="headerlink" title="降低产品失败的风险，提高用户对产品质量的信心"></a>降低产品失败的风险，提高用户对产品质量的信心</h4><h2 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h2><ul><li><h4 id="市场调研"><a href="#市场调研" class="headerlink" title="市场调研"></a>市场调研</h4></li><li><h4 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h4></li><li><h4 id="项目立项"><a href="#项目立项" class="headerlink" title="项目立项"></a>项目立项</h4></li><li><h4 id="需求设计"><a href="#需求设计" class="headerlink" title="需求设计"></a>需求设计</h4></li><li><h4 id="设计开发测试"><a href="#设计开发测试" class="headerlink" title="设计开发测试"></a>设计开发测试</h4></li><li><h4 id="发布运行维护"><a href="#发布运行维护" class="headerlink" title="发布运行维护"></a>发布运行维护</h4></li><li><h4 id="报废"><a href="#报废" class="headerlink" title="报废"></a>报废</h4></li></ul><h2 id="怎样做好软件测试"><a href="#怎样做好软件测试" class="headerlink" title="怎样做好软件测试"></a>怎样做好软件测试</h2><p>掌握专业的测试技能<br> 熟悉相关业务知识持续的学习能力沟通能力<br> 责任心，自信心，细心，耐心，风险意识，总结、分析问题的能力，团队协作精神，抗压能力…….</p><h2 id="开发模型"><a href="#开发模型" class="headerlink" title="开发模型"></a>开发模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ol><li><p>计划</p></li><li><p>需求分析</p></li><li><p>设计</p></li><li><p>编码</p></li><li><p>测试</p></li><li><p>运行维护</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ol><li>分工明确</li><li>有条理</li><li>流程规范</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>死板，不灵活</li><li>测试介入晚，发现问题修复成本高</li><li>不利于需求变更</li></ol></li></ol><h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><h3 id="RUP模型"><a href="#RUP模型" class="headerlink" title="RUP模型"></a>RUP模型</h3><h3 id="敏捷模型"><a href="#敏捷模型" class="headerlink" title="敏捷模型"></a>敏捷模型</h3><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><h2 id="缺陷管理"><a href="#缺陷管理" class="headerlink" title="缺陷管理"></a>缺陷管理</h2><h3 id="缺陷的基本概念"><a href="#缺陷的基本概念" class="headerlink" title="缺陷的基本概念"></a>缺陷的基本概念</h3><h4 id="什么是缺陷"><a href="#什么是缺陷" class="headerlink" title="什么是缺陷"></a>什么是缺陷</h4><p>所有不满足用户需求的都是缺陷</p><h4 id="包含情景"><a href="#包含情景" class="headerlink" title="包含情景"></a>包含情景</h4><ol><li>遗漏：<br>用户要求的功能没有实现</li><li>错误：<br>用户要求的功能实现了，但是实现的功能有问题或者根本无法使用</li><li>冗余：<br>实现了用户需求中没有要求的功能</li><li>不满意：实现的功能都是符合用户需求的，但是用户就是不满意</li></ol><h2 id="软件测试原则"><a href="#软件测试原则" class="headerlink" title="软件测试原则"></a>软件测试原则</h2><h3 id="软件测试是为了证明缺陷的存在"><a href="#软件测试是为了证明缺陷的存在" class="headerlink" title="软件测试是为了证明缺陷的存在"></a>软件测试是为了证明缺陷的存在</h3><h3 id="不可能进行穷尽测试"><a href="#不可能进行穷尽测试" class="headerlink" title="不可能进行穷尽测试"></a>不可能进行穷尽测试</h3><ul><li>不可能覆盖所有的测试场景</li><li>不可能将所有的bug都找出来</li></ul><h3 id="测试应该尽早的介入，尽早的启动"><a href="#测试应该尽早的介入，尽早的启动" class="headerlink" title="测试应该尽早的介入，尽早的启动"></a>测试应该尽早的介入，尽早的启动</h3><p>测试越早启动，越早进行测试，越早发现bug；修复bug的成本越低。<br>越往后定位bug越难，系统业务越来越复杂，修改代码的影响范围越广<br>越早的介入，越早了解需求，对需求的理解越深，对业务越熟悉，测试覆盖度越广，测试质量越高。<br>能够越早的了解到产品经理和开发人员的工作计划，从而能够更加合理的安排测试自己的工作计划。</p><h3 id="缺陷群集现象"><a href="#缺陷群集现象" class="headerlink" title="缺陷群集现象"></a>缺陷群集现象</h3><h4 id="二八原则"><a href="#二八原则" class="headerlink" title="二八原则"></a>二八原则</h4><p>80%的bug集中在20%的主要功能上面；<br>在测试的过程中发现某个缺陷存在bug，那么它周边的功能也可能会存在类似的bug<br>____在测试的过程中发现某个开发人员写的某个功能存在bug，那么由该开发负责编写的其他功能可能也存在类似的bug </p><h4 id="杀虫剂悖论"><a href="#杀虫剂悖论" class="headerlink" title="杀虫剂悖论"></a>杀虫剂悖论</h4><p> 不同的测试活动依赖于不同的测试背景</p><h4 id="不存在缺陷的谬论"><a href="#不存在缺陷的谬论" class="headerlink" title="不存在缺陷的谬论"></a>不存在缺陷的谬论</h4><p>所有软件都存在缺陷</p><h2 id="软件测试方法"><a href="#软件测试方法" class="headerlink" title="软件测试方法"></a>软件测试方法</h2><h3 id="是否关注代码的内部逻辑划分"><a href="#是否关注代码的内部逻辑划分" class="headerlink" title="是否关注代码的内部逻辑划分"></a>是否关注代码的内部逻辑划分</h3><ul><li>白盒测试：单元测试阶段<br>在测试的过程中，关注代码的内部逻辑</li><li>灰盒测试：群集测试阶段<br>在测试的过程中，既关注代码的内部逻辑，也关注程序的输入和输出</li><li>黑盒测试</li></ul><h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><ul><li>显性需求：需求规格说明书中明确要求的</li><li>隐性需求：需求规格说明书中没有明确的要求 但是程序在实现的过程中需要实现的功能</li></ul><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><ul><li>并发测试：不同人在同一时间做同一件事（狭义上的并发）</li><li>负载测试：相关指标都没有出错的情况下 观察程序的运行情况</li><li>压力测试：运行相关指标出现错误 蚝尽服务器资源</li><li>容量测试：</li><li>稳定性测试：</li></ul><h4 id="性能的相关指标"><a href="#性能的相关指标" class="headerlink" title="性能的相关指标"></a>性能的相关指标</h4><ul><li>并发用户数</li><li>最大用户数</li><li>响应时间</li><li>每秒点击数</li><li>服务器相关指标</li><li>QPS</li></ul><h3 id="安全测试"><a href="#安全测试" class="headerlink" title="安全测试"></a>安全测试</h3><p>渗透性测试工程师</p><h3 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h3><ul><li>Web项目：<br>不同浏览器：不同浏览器对JS和html标签的支持不太一样<br>不同操作系统，不同分辨率</li><li>APP项目<br>不同操作系统，不同品牌，不同型号，不同版本<br>APP兼容性测试策略：真机+模拟器+云测   云测平台：mtc testin  wetest</li></ul><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><p>接口：负责模块与模块之间数据的传输和交互<br>接口测试实际上就是没有界面的功能测试<br>接口测试可以越早发现问题  修复问题成本越低<br>前段传参不可信  接口层面会覆盖的更广，更安全<br>缩短测试时间：在系统测试之前进行接口测试，保障所有的接口都没有问题，这样在系统测试阶段发现的问题会减少，并且发现问题定位位问题的成本更低<br>接口测试工具：postman  jmeter  soupui  httpclint  fiddler</p><h4 id="接口测试的依据"><a href="#接口测试的依据" class="headerlink" title="接口测试的依据"></a>接口测试的依据</h4><p>接口设计文档 数据库表结构设计文档 产品需求规格说明书</p><h4 id="怎样评判接口没有问题"><a href="#怎样评判接口没有问题" class="headerlink" title="怎样评判接口没有问题"></a>怎样评判接口没有问题</h4><ul><li>接口能否被正常调用</li><li>接口请求参数　返回传输以及数据的格式是否符合接口文档所声名</li><li>接口返回的数据是正确的</li><li>接口是否实现接口文档所声明的功能　</li><li>接口设计是否满足实际的业务需求</li></ul><h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><p>测试对象：<br>产品需求规格说明书  原型图  流程图 数据库表结构设计文档 接口设计文档 安装部署文档 软件运维手册 用户操作手册</p><h4 id="测试内容"><a href="#测试内容" class="headerlink" title="测试内容"></a>测试内容</h4><p>正确性 完整性 一致性  无二义性<br>界面（UI）测试  易用性测试（友好性测试） 安装卸载测试（C&#x2F;S结构项目）<br>app专项测试：耗电  流量  温度 内存 cpu<br>测试标准：<br>和同类型的产品进行比较  和自己的上一代产品比较</p><ul><li>其他测试类型<br>可用  可靠   可移植  可维护  可扩展性测试</li><li>不算测试类型的<br>确认测试：验证缺陷是否真正的得到解决</li></ul><h4 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h4><p>防止研发人员在修复缺陷的时候，引入新的缺陷</p><h5 id="回归测试策略"><a href="#回归测试策略" class="headerlink" title="回归测试策略"></a>回归测试策略</h5><p> 完全回归：执行所有的测试用例 覆盖所有的功能<br>选择性回归：执行上一轮失败的测试用例<br>测试确认：执行系统核心功能 主业务功能的测试用例</p><h4 id="测试轮次"><a href="#测试轮次" class="headerlink" title="测试轮次"></a>测试轮次</h4><p>一般至少三轮</p><h5 id="第一轮测试"><a href="#第一轮测试" class="headerlink" title="第一轮测试"></a>第一轮测试</h5><p>覆盖测试   首先进行冒烟测试<br>测试系统核心功能  主业务流程功能<br>冒烟测试的目的是为了保障测试的代码质量满足基本的测试需要<br>冒烟测试通过 再进行覆盖测试：执行所有的测试用例</p><h2 id="测试阶段-级别"><a href="#测试阶段-级别" class="headerlink" title="测试阶段(级别)"></a>测试阶段(级别)</h2><h3 id="需求测试"><a href="#需求测试" class="headerlink" title="需求测试"></a>需求测试</h3><h4 id="测试对象"><a href="#测试对象" class="headerlink" title="测试对象"></a>测试对象</h4><ul><li>产品需求规格说明书</li><li>原型图</li><li>流程图</li></ul><h4 id="测试实施时间"><a href="#测试实施时间" class="headerlink" title="测试实施时间"></a>测试实施时间</h4><p>需求设计完成之后、编码之前</p><h4 id="测试内容-1"><a href="#测试内容-1" class="headerlink" title="测试内容"></a>测试内容</h4><ul><li>正确性</li><li>完整性</li><li>一致性</li><li>无二义性</li></ul><h4 id="测试实施人员"><a href="#测试实施人员" class="headerlink" title="测试实施人员"></a>测试实施人员</h4><p>测试工测师</p><h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h4><p>黑盒  静态 手工<br>测试类型 文档测试</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>测试对象：代码片断（方法 类  函数）“单元”是软件测试中最小的单位<br>测试实施时间：编码的过程中   测试内容：测试代码片段是否实现其所声明的功能<br>测试实施人员：开发工程师，白盒测试工程师<br>测试方法：白盒测试，动态测试，手工、自动化测试<br>测试类型：功能测试</p><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>接口测试   测试对象：模块和模块之间数据传输和交互的正确性  各种接口<br>测试实施时间：模块开发完成、进行模块之间联调的时候、接口开发完成之后<br>测试内容：接口的功能、性能、安全<br>测试实施人员：测试工程师<br>测试方法：灰盒，动态、静态（测试接口文档、数据库表结构设计文档） 手工、自动化<br>测试类型：接口测试，功能测试，性能测试，安全测试，文档测试</p><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><p>测试对象：完整功能的系统<br>测试实施时间：模块联调完成，所有功能开发完成之后<br>测试内容：需求规格说明书中声明的所有<br>测试实施人员：测试工程师<br>测试方法：出灰盒之外的其余所有测试方法<br>测试类型：除接口测试之外的其余所有测试类型</p><h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><p>测试对象：功能层面上讲，和系统测试一样<br>相比系统测试来说，多了一些过程文档验收<br>测试实施时间：系统测试完成之后，给用户安装部署前&#x2F;后<br>测试内容：需求规格说明书中要求的所有功能<br>文档的正确性，完整性，一致性和无二义性<br>测试实施人员：测试工程师，甲方（甲方代表）<br>测试方法：几乎所有 具体的看甲方要求做哪些类型的测试<br>测试类型：几乎所有</p><h4 id="验收测试的划分"><a href="#验收测试的划分" class="headerlink" title="验收测试的划分"></a>验收测试的划分</h4><p>阿尔法测试：在开发（测试，仿真）环境下进行的，开发人员一般在现场，发现问题后及时修复<br>贝塔测试：在用户真实环境下进行的，真正核心的区别在于测试使用的数据不一样<br>开发人员一般不在现场，发现问题后统一收集，统一反馈，统一修复<br>UAT测试：用户接受度测试</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><h4 id="测试用例的概念"><a href="#测试用例的概念" class="headerlink" title="测试用例的概念"></a>测试用例的概念</h4><p>测试执行的时候使用的一个例子，为了特定的目的（用例标题）而设计的一组输入（操作步骤和预置条件）和输出（预期结果）</p><h4 id="测试用例的作用"><a href="#测试用例的作用" class="headerlink" title="测试用例的作用"></a>测试用例的作用</h4><p>不断加深对需求的理解，提高测试覆盖度<br>对需求理解越深，那么考虑的场景越多，测试用例 用例覆盖度越广，测试质量越高<br>指导测试执行，一定程度上反映测试进度，帮助后期分析测试质量</p><h4 id="测试用例的内容"><a href="#测试用例的内容" class="headerlink" title="测试用例的内容"></a>测试用例的内容</h4><ul><li>用例编号<br>每个公司有所差异<br>项目-测试阶段-模块-测试项-编号</li><li>所属项目</li><li>所需产品</li><li>所属模块</li><li>测试项</li><li>用例标题<br>一句话言简意赅的说明本条测试用例要用来测什么</li><li>预置条件</li><li>操作步骤</li><li>预期结果</li><li>优先级</li><li>用例属性</li><li>适用阶段</li><li>作者</li></ul><h4 id="测试用例设计原则"><a href="#测试用例设计原则" class="headerlink" title="测试用例设计原则"></a>测试用例设计原则</h4><h4 id="测试用例设计方法"><a href="#测试用例设计方法" class="headerlink" title="测试用例设计方法"></a>测试用例设计方法</h4><h4 id="测试用例评审"><a href="#测试用例评审" class="headerlink" title="测试用例评审"></a>测试用例评审</h4><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
